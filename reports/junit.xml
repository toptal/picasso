<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="1088" failures="0" errors="0" time="40.234">
  <testsuite name="BarChart" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:23" time="1.57" tests="2">
    <testcase classname="BarChart formats data correctly" name="BarChart formats data correctly" time="0.002">
    </testcase>
    <testcase classname="BarChart extracts values correctly" name="BarChart extracts values correctly" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CheckboxGroup" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:23" time="2.897" tests="2">
    <testcase classname="CheckboxGroup shows the label in default case" name="CheckboxGroup shows the label in default case" time="0.064">
    </testcase>
    <testcase classname="CheckboxGroup shows the label in title case" name="CheckboxGroup shows the label in title case" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="FieldLabel" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:23" time="3.078" tests="5">
    <testcase classname="FieldLabel renders default field label" name="FieldLabel renders default field label" time="0.027">
    </testcase>
    <testcase classname="FieldLabel optional required variant renders label with optional mark" name="FieldLabel optional required variant renders label with optional mark" time="0.007">
    </testcase>
    <testcase classname="FieldLabel optional required variant renders label without optional mark" name="FieldLabel optional required variant renders label without optional mark" time="0.005">
    </testcase>
    <testcase classname="FieldLabel asterisk required variant renders label without asterisk" name="FieldLabel asterisk required variant renders label without asterisk" time="0.003">
    </testcase>
    <testcase classname="FieldLabel asterisk required variant renders label with asterisk" name="FieldLabel asterisk required variant renders label with asterisk" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Form.Checkbox" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:23" time="3.181" tests="7">
    <testcase classname="Form.Checkbox default render for single checkbox" name="Form.Checkbox default render for single checkbox" time="0.055">
    </testcase>
    <testcase classname="Form.Checkbox when required prop is passed does not set &quot;required&quot; attribute to input tag, to avoid Chrome tooltip" name="Form.Checkbox when required prop is passed does not set &quot;required&quot; attribute to input tag, to avoid Chrome tooltip" time="0.019">
    </testcase>
    <testcase classname="Form.Checkbox default render for checkboxes in a group" name="Form.Checkbox default render for checkboxes in a group" time="0.029">
    </testcase>
    <testcase classname="Form.Checkbox required with asterisk single checkbox" name="Form.Checkbox required with asterisk single checkbox" time="0.013">
    </testcase>
    <testcase classname="Form.Checkbox never shows (optional) postfix for single checkbox" name="Form.Checkbox never shows (optional) postfix for single checkbox" time="0.009">
    </testcase>
    <testcase classname="Form.Checkbox shows the label in default case" name="Form.Checkbox shows the label in default case" time="0.009">
    </testcase>
    <testcase classname="Form.Checkbox shows the label in title case" name="Form.Checkbox shows the label in title case" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="FieldWrapper" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:24" time="1.649" tests="1">
    <testcase classname="FieldWrapper when there is a field error passes status to its children" name="FieldWrapper when there is a field error passes status to its children" time="0.114">
    </testcase>
  </testsuite>
  <testsuite name="Input" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:26" time="1.041" tests="1">
    <testcase classname="Input fires the onFocus callback after focusing the input" name="Input fires the onFocus callback after focusing the input" time="0.054">
    </testcase>
  </testsuite>
  <testsuite name="getInputStatus" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:26" time="0.865" tests="9">
    <testcase classname="getInputStatus when field has an error returns &quot;error&quot;" name="getInputStatus when field has an error returns &quot;error&quot;" time="0.001">
    </testcase>
    <testcase classname="getInputStatus returns &quot;default&quot; when field has not been touched" name="getInputStatus returns &quot;default&quot; when field has not been touched" time="0.001">
    </testcase>
    <testcase classname="getInputStatus when field has a submit error returns &quot;error&quot; if the field is not dirty since last submit" name="getInputStatus when field has a submit error returns &quot;error&quot; if the field is not dirty since last submit" time="0">
    </testcase>
    <testcase classname="getInputStatus when field has a submit error when field has been dirty since last submit returns &quot;success&quot; if show valid state is enabled" name="getInputStatus when field has a submit error when field has been dirty since last submit returns &quot;success&quot; if show valid state is enabled" time="0">
    </testcase>
    <testcase classname="getInputStatus when field has a submit error when field has been dirty since last submit returns &quot;default&quot; if show valid state is not enabled for the form" name="getInputStatus when field has a submit error when field has been dirty since last submit returns &quot;default&quot; if show valid state is not enabled for the form" time="0">
    </testcase>
    <testcase classname="getInputStatus when field has not been touched returns &quot;default&quot;" name="getInputStatus when field has not been touched returns &quot;default&quot;" time="0">
    </testcase>
    <testcase classname="getInputStatus when field has no error and no submit error and touched returns &quot;success&quot; if show valid state is enabled for the form" name="getInputStatus when field has no error and no submit error and touched returns &quot;success&quot; if show valid state is enabled for the form" time="0">
    </testcase>
    <testcase classname="getInputStatus when field has no error and no submit error and touched returns &quot;default&quot; if show valid state is not enabled for the form" name="getInputStatus when field has no error and no submit error and touched returns &quot;default&quot; if show valid state is not enabled for the form" time="0">
    </testcase>
    <testcase classname="getInputStatus when validate on submit enabled and modified since last submit returns &quot;default&quot;" name="getInputStatus when validate on submit enabled and modified since last submit returns &quot;default&quot;" time="0">
    </testcase>
  </testsuite>
  <testsuite name="PasswordInput field requirements" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:27" time="0.134" tests="5">
    <testcase classname="PasswordInput field requirements atLeastEightCharacters test string to have at least eight characters" name="PasswordInput field requirements atLeastEightCharacters test string to have at least eight characters" time="0.001">
    </testcase>
    <testcase classname="PasswordInput field requirements atLeastOneUpperCaseCharacter test string to have at least one uppercase character" name="PasswordInput field requirements atLeastOneUpperCaseCharacter test string to have at least one uppercase character" time="0">
    </testcase>
    <testcase classname="PasswordInput field requirements atLeastOneLowerCaseCharacter test string to have at least one lowercase character" name="PasswordInput field requirements atLeastOneLowerCaseCharacter test string to have at least one lowercase character" time="0.001">
    </testcase>
    <testcase classname="PasswordInput field requirements atLeastOneNumber test string to have at least one number" name="PasswordInput field requirements atLeastOneNumber test string to have at least one number" time="0">
    </testcase>
    <testcase classname="PasswordInput field requirements atLeastOneSpecialCharacter test string to have at least one special character" name="PasswordInput field requirements atLeastOneSpecialCharacter test string to have at least one special character" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Form.ConfigProvider" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:26" time="1.115" tests="2">
    <testcase classname="Form.ConfigProvider validate only on submit" name="Form.ConfigProvider validate only on submit" time="0.147">
    </testcase>
    <testcase classname="Form.ConfigProvider validate normally on blur / change" name="Form.ConfigProvider validate normally on blur / change" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="Form" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:26" time="1.098" tests="6">
    <testcase classname="Form renders" name="Form renders" time="0.073">
    </testcase>
    <testcase classname="Form renders with an error" name="Form renders with an error" time="0.07">
    </testcase>
    <testcase classname="Form when `disableScrollOnError` is specified" name="Form when `disableScrollOnError` is specified" time="0.019">
    </testcase>
    <testcase classname="Form when validateOnBlur is enabled validates only on blur" name="Form when validateOnBlur is enabled validates only on blur" time="0.023">
    </testcase>
    <testcase classname="Form when validateOnBlur is enabled when showValidState is enabled shows validation success when form submitted on Enter" name="Form when validateOnBlur is enabled when showValidState is enabled shows validation success when form submitted on Enter" time="0.022">
    </testcase>
    <testcase classname="Form when initial values provided to form fills TagSelector field with provided values" name="Form when initial values provided to form fills TagSelector field with provided values" time="0.026">
    </testcase>
  </testsuite>
  <testsuite name="FormRadio" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:27" time="1.045" tests="2">
    <testcase classname="FormRadio renders" name="FormRadio renders" time="0.059">
    </testcase>
    <testcase classname="FormRadio required with asterisk" name="FormRadio required with asterisk" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="Accordion" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:27" time="0.805" tests="8">
    <testcase classname="Accordion renders collapsed by default" name="Accordion renders collapsed by default" time="0.097">
    </testcase>
    <testcase classname="Accordion renders empty summary when one is not provided" name="Accordion renders empty summary when one is not provided" time="0.012">
    </testcase>
    <testcase classname="Accordion toggles" name="Accordion toggles" time="0.059">
    </testcase>
    <testcase classname="Accordion renders disabled" name="Accordion renders disabled" time="0.017">
    </testcase>
    <testcase classname="Accordion renders expanded initially" name="Accordion renders expanded initially" time="0.094">
    </testcase>
    <testcase classname="Accordion renders custom icon when passed" name="Accordion renders custom icon when passed" time="0.014">
    </testcase>
    <testcase classname="Accordion passes styles correctly" name="Accordion passes styles correctly" time="0.018">
    </testcase>
    <testcase classname="Accordion toggles when controlled" name="Accordion toggles when controlled" time="0.041">
    </testcase>
  </testsuite>
  <testsuite name="RadioGroup" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:27" time="1.031" tests="2">
    <testcase classname="RadioGroup shows the label in default case" name="RadioGroup shows the label in default case" time="0.06">
    </testcase>
    <testcase classname="RadioGroup shows the label in title case" name="RadioGroup shows the label in title case" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="AccordionDetails" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:28" time="0.307" tests="1">
    <testcase classname="AccordionDetails renders" name="AccordionDetails renders" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="Rating" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:27" time="1.116" tests="7">
    <testcase classname="Rating Thumbs renders default Thumbs" name="Rating Thumbs renders default Thumbs" time="0.037">
    </testcase>
    <testcase classname="Rating Thumbs renders default Stars" name="Rating Thumbs renders default Stars" time="0.018">
    </testcase>
    <testcase classname="Rating Thumbs when submitting while required don&apos;t show a validation error for negative values" name="Rating Thumbs when submitting while required don&apos;t show a validation error for negative values" time="0.028">
    </testcase>
    <testcase classname="Rating Thumbs when submitting with custom validation validate both required when having a custom validation with preference" name="Rating Thumbs when submitting with custom validation validate both required when having a custom validation with preference" time="0.012">
    </testcase>
    <testcase classname="Rating Thumbs when submitting with custom validation validate both required and having a custom validation" name="Rating Thumbs when submitting with custom validation validate both required and having a custom validation" time="0.02">
    </testcase>
    <testcase classname="Rating Thumbs when submitting with custom validation validate both required and having a custom validation, everythin ok" name="Rating Thumbs when submitting with custom validation validate both required and having a custom validation, everythin ok" time="0.012">
    </testcase>
    <testcase classname="Rating Thumbs when submitting with requiredPositive true don&apos;t allow a negative value" name="Rating Thumbs when submitting with requiredPositive true don&apos;t allow a negative value" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="AccordionSummary" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:28" time="0.292" tests="1">
    <testcase classname="AccordionSummary renders" name="AccordionSummary renders" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="AccountSelect" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:28" time="0.53" tests="2">
    <testcase classname="AccountSelect renders" name="AccountSelect renders" time="0.05">
    </testcase>
    <testcase classname="AccountSelect should fire onSelect event after clicking on account&apos;s name" name="AccountSelect should fire onSelect event after clicking on account&apos;s name" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="Alert" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:28" time="0.43" tests="1">
    <testcase classname="Alert renders" name="Alert renders" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="Alert" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:28" time="0.46" tests="2">
    <testcase classname="Alert renders" name="Alert renders" time="0.029">
    </testcase>
    <testcase classname="Alert with `prop.onClose` is passed calls `prop.onClose`" name="Alert with `prop.onClose` is passed calls `prop.onClose`" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="ApplicationUpdateNotification" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:28" time="0.331" tests="3">
    <testcase classname="ApplicationUpdateNotification renders" name="ApplicationUpdateNotification renders" time="0.036">
    </testcase>
    <testcase classname="ApplicationUpdateNotification when click on &quot;Update Later&quot; the corresponding callback is called" name="ApplicationUpdateNotification when click on &quot;Update Later&quot; the corresponding callback is called" time="0.011">
    </testcase>
    <testcase classname="ApplicationUpdateNotification when click on &quot;Reload Now&quot; the corresponding callback is called" name="ApplicationUpdateNotification when click on &quot;Reload Now&quot; the corresponding callback is called" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Avatar.Group" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.458" tests="3">
    <testcase classname="Avatar.Group renders on limit" name="Avatar.Group renders on limit" time="0.023">
    </testcase>
    <testcase classname="Avatar.Group renders Avatars within limit" name="Avatar.Group renders Avatars within limit" time="0.006">
    </testcase>
    <testcase classname="Avatar.Group renders limited number of Avatars" name="Avatar.Group renders limited number of Avatars" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="Avatar" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.535" tests="7">
    <testcase classname="Avatar renders with initials" name="Avatar renders with initials" time="0.028">
    </testcase>
    <testcase classname="Avatar renders with a long name" name="Avatar renders with a long name" time="0.011">
    </testcase>
    <testcase classname="Avatar renders with an image" name="Avatar renders with an image" time="0.016">
    </testcase>
    <testcase classname="Avatar renders with logo" name="Avatar renders with logo" time="0.022">
    </testcase>
    <testcase classname="Avatar renders without logo" name="Avatar renders without logo" time="0.009">
    </testcase>
    <testcase classname="Avatar renders with a placeholder icon" name="Avatar renders with a placeholder icon" time="0.009">
    </testcase>
    <testcase classname="Avatar when edit state provided renders with edit icon and backdrop" name="Avatar when edit state provided renders with edit icon and backdrop" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="AvatarUpload" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.516" tests="4">
    <testcase classname="AvatarUpload renders" name="AvatarUpload renders" time="0.051">
    </testcase>
    <testcase classname="AvatarUpload when a valid image dropped calls onDrop and onDropAccepted for the parent with one file" name="AvatarUpload when a valid image dropped calls onDrop and onDropAccepted for the parent with one file" time="0.018">
    </testcase>
    <testcase classname="AvatarUpload when an invalid image dropped calls onDrop and onDropRejected for the parent with file rejection" name="AvatarUpload when an invalid image dropped calls onDrop and onDropRejected for the parent with file rejection" time="0.007">
    </testcase>
    <testcase classname="AvatarUpload when source is exist shows avatar with src and hides dropzone" name="AvatarUpload when source is exist shows avatar with src and hides dropzone" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="Badge" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.384" tests="10">
    <testcase classname="Badge renders" name="Badge renders" time="0.022">
    </testcase>
    <testcase classname="Badge renders in red variant" name="Badge renders in red variant" time="0.006">
    </testcase>
    <testcase classname="Badge should transform content when value is more than 10 for small size" name="Badge should transform content when value is more than 10 for small size" time="0.014">
    </testcase>
    <testcase classname="Badge should not transform content when value is les than 10 for small size" name="Badge should not transform content when value is les than 10 for small size" time="0.012">
    </testcase>
    <testcase classname="Badge should transform content when value is more than 100 for medium size" name="Badge should transform content when value is more than 100 for medium size" time="0.008">
    </testcase>
    <testcase classname="Badge should not transform content when value is more than 100 for medium size" name="Badge should not transform content when value is more than 100 for medium size" time="0.008">
    </testcase>
    <testcase classname="Badge should render data-testid" name="Badge should render data-testid" time="0.004">
    </testcase>
    <testcase classname="Badge when max is set should trim number with custom max value" name="Badge when max is set should trim number with custom max value" time="0.007">
    </testcase>
    <testcase classname="Badge when max is set should not trim when content is lower than max value" name="Badge when max is set should not trim when content is lower than max value" time="0.012">
    </testcase>
    <testcase classname="Badge when max is set should show the badge if the content is 0" name="Badge when max is set should show the badge if the content is 0" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Amount" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.282" tests="1">
    <testcase classname="Amount renders" name="Amount renders" time="0.029">
    </testcase>
  </testsuite>
  <testsuite name="Button" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.353" tests="7">
    <testcase classname="Button onClick callback should be fired after clicking the button" name="Button onClick callback should be fired after clicking the button" time="0.028">
    </testcase>
    <testcase classname="Button onClick callback should not be fired when clicked button is in loading state" name="Button onClick callback should not be fired when clicked button is in loading state" time="0.011">
    </testcase>
    <testcase classname="Button should transform text to title case when Picasso titleCase property is true" name="Button should transform text to title case when Picasso titleCase property is true" time="0.008">
    </testcase>
    <testcase classname="Button should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="Button should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.006">
    </testcase>
    <testcase classname="Button disabled button renders disabled version" name="Button disabled button renders disabled version" time="0.009">
    </testcase>
    <testcase classname="Button disabled button disables button events" name="Button disabled button disables button events" time="0.01">
    </testcase>
    <testcase classname="Button disabled button as link renders disabled version" name="Button disabled button as link renders disabled version" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="ButtonGroup" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.314" tests="1">
    <testcase classname="ButtonGroup render" name="ButtonGroup render" time="0.036">
    </testcase>
  </testsuite>
  <testsuite name="ButtonCheckbox" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.369" tests="4">
    <testcase classname="ButtonCheckbox renders" name="ButtonCheckbox renders" time="0.037">
    </testcase>
    <testcase classname="ButtonCheckbox changes value of checkbox when clicking on button" name="ButtonCheckbox changes value of checkbox when clicking on button" time="0.018">
    </testcase>
    <testcase classname="ButtonCheckbox changes value of checkbox when clicking on checkbox" name="ButtonCheckbox changes value of checkbox when clicking on checkbox" time="0.01">
    </testcase>
    <testcase classname="ButtonCheckbox ignores clicks when disabled" name="ButtonCheckbox ignores clicks when disabled" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="BreadcrumbsItem" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:29" time="0.454" tests="2">
    <testcase classname="BreadcrumbsItem should transform text to title case when Picasso titleCase property is true" name="BreadcrumbsItem should transform text to title case when Picasso titleCase property is true" time="0.017">
    </testcase>
    <testcase classname="BreadcrumbsItem should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="BreadcrumbsItem should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="Autocomplete" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:28" time="1.55" tests="35">
    <testcase classname="Autocomplete static behavior renders" name="Autocomplete static behavior renders" time="0.043">
    </testcase>
    <testcase classname="Autocomplete static behavior renders a placeholder" name="Autocomplete static behavior renders a placeholder" time="0.018">
    </testcase>
    <testcase classname="Autocomplete static behavior renders an enableAutofill hidden input" name="Autocomplete static behavior renders an enableAutofill hidden input" time="0.016">
    </testcase>
    <testcase classname="Autocomplete static behavior renders a loading indicator" name="Autocomplete static behavior renders a loading indicator" time="0.015">
    </testcase>
    <testcase classname="Autocomplete static behavior renders custom adornments" name="Autocomplete static behavior renders custom adornments" time="0.02">
    </testcase>
    <testcase classname="Autocomplete static behavior renders an icon" name="Autocomplete static behavior renders an icon" time="0.016">
    </testcase>
    <testcase classname="Autocomplete static behavior uses custom menu keys" name="Autocomplete static behavior uses custom menu keys" time="0.011">
    </testcase>
    <testcase classname="Autocomplete static behavior renders a value that exists in options" name="Autocomplete static behavior renders a value that exists in options" time="0.023">
    </testcase>
    <testcase classname="Autocomplete static behavior with custom input component" name="Autocomplete static behavior with custom input component" time="0.007">
    </testcase>
    <testcase classname="Autocomplete static behavior shows default no options text when no options are available" name="Autocomplete static behavior shows default no options text when no options are available" time="0.097">
    </testcase>
    <testcase classname="Autocomplete static behavior shows custom no options text when no options are available" name="Autocomplete static behavior shows custom no options text when no options are available" time="0.049">
    </testcase>
    <testcase classname="Autocomplete static behavior hides no options text when disabled and no options are avialble" name="Autocomplete static behavior hides no options text when disabled and no options are avialble" time="0.044">
    </testcase>
    <testcase classname="Autocomplete static behavior renders custom options with custom keys" name="Autocomplete static behavior renders custom options with custom keys" time="0.053">
    </testcase>
    <testcase classname="Autocomplete static behavior renders custom display value" name="Autocomplete static behavior renders custom display value" time="0.049">
    </testcase>
    <testcase classname="Autocomplete static behavior does not render a custom display value if a custom options is rendered" name="Autocomplete static behavior does not render a custom display value if a custom options is rendered" time="0.042">
    </testcase>
    <testcase classname="Autocomplete static behavior should not transform options text to title case when Picasso titleCase property is true" name="Autocomplete static behavior should not transform options text to title case when Picasso titleCase property is true" time="0.012">
    </testcase>
    <testcase classname="Autocomplete static behavior uses a custom popper container" name="Autocomplete static behavior uses a custom popper container" time="0.009">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior on focus" name="Autocomplete dynamic behavior on focus" time="0.047">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior on change" name="Autocomplete dynamic behavior on change" time="0.041">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior on blur" name="Autocomplete dynamic behavior on blur" time="0.011">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior on select option" name="Autocomplete dynamic behavior on select option" time="0.033">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior on &quot;Esc&quot; key pressed" name="Autocomplete dynamic behavior on &quot;Esc&quot; key pressed" time="0.01">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior On &quot;Backspace&quot; key pressed with empty text" name="Autocomplete dynamic behavior On &quot;Backspace&quot; key pressed with empty text" time="0.011">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior on &quot;arrow up/down&quot; key press press down" name="Autocomplete dynamic behavior on &quot;arrow up/down&quot; key press press down" time="0.045">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior on &quot;arrow up/down&quot; key press press up" name="Autocomplete dynamic behavior on &quot;arrow up/down&quot; key press press up" time="0.057">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior renders other option with default text" name="Autocomplete dynamic behavior renders other option with default text" time="0.051">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior renders custom other options text and calls onOtherOptionSelect when selected" name="Autocomplete dynamic behavior renders custom other options text and calls onOtherOptionSelect when selected" time="0.037">
    </testcase>
    <testcase classname="Autocomplete dynamic behavior renders custom other options" name="Autocomplete dynamic behavior renders custom other options" time="0.044">
    </testcase>
    <testcase classname="Autocomplete Autofill when autoComplete value is not passed and autofill is not enabled" name="Autocomplete Autofill when autoComplete value is not passed and autofill is not enabled" time="0.011">
    </testcase>
    <testcase classname="Autocomplete Autofill when autoComplete value is not passed and autofill is enabled" name="Autocomplete Autofill when autoComplete value is not passed and autofill is enabled" time="0.015">
    </testcase>
    <testcase classname="Autocomplete Autofill when autoComplete value is passed and autofill is not enabled" name="Autocomplete Autofill when autoComplete value is passed and autofill is not enabled" time="0.013">
    </testcase>
    <testcase classname="Autocomplete Autofill when autoComplete value is passed and autofill is enabled" name="Autocomplete Autofill when autoComplete value is passed and autofill is enabled" time="0.007">
    </testcase>
    <testcase classname="Autocomplete reset behavior when reset button clicked" name="Autocomplete reset behavior when reset button clicked" time="0.031">
    </testcase>
    <testcase classname="Focus behavior focuses input when start adornment is clicked" name="Focus behavior focuses input when start adornment is clicked" time="0.041">
    </testcase>
    <testcase classname="Focus behavior focuses input when end adornment is clicked" name="Focus behavior focuses input when end adornment is clicked" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="ButtonRadio" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:30" time="0.404" tests="4">
    <testcase classname="ButtonRadio renders" name="ButtonRadio renders" time="0.035">
    </testcase>
    <testcase classname="ButtonRadio changes value of radio when clicking on button" name="ButtonRadio changes value of radio when clicking on button" time="0.016">
    </testcase>
    <testcase classname="ButtonRadio changes value of radio when clicking on radio" name="ButtonRadio changes value of radio when clicking on radio" time="0.012">
    </testcase>
    <testcase classname="ButtonRadio ignores clicks when disabled" name="ButtonRadio ignores clicks when disabled" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Checkbox" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:30" time="0.402" tests="11">
    <testcase classname="Checkbox renders default checkbox without label" name="Checkbox renders default checkbox without label" time="0.027">
    </testcase>
    <testcase classname="Checkbox should render default checkbox with label" name="Checkbox should render default checkbox with label" time="0.01">
    </testcase>
    <testcase classname="Checkbox renders disabled state" name="Checkbox renders disabled state" time="0.007">
    </testcase>
    <testcase classname="Checkbox renders indeterminate state" name="Checkbox renders indeterminate state" time="0.005">
    </testcase>
    <testcase classname="Checkbox renders with asterisk" name="Checkbox renders with asterisk" time="0.009">
    </testcase>
    <testcase classname="Checkbox renders with (optional)" name="Checkbox renders with (optional)" time="0.006">
    </testcase>
    <testcase classname="Checkbox should transform text to title case when Picasso titleCase property is true" name="Checkbox should transform text to title case when Picasso titleCase property is true" time="0.006">
    </testcase>
    <testcase classname="Checkbox should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="Checkbox should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.006">
    </testcase>
    <testcase classname="Checkbox checkbox interaction should render checked checkbox" name="Checkbox checkbox interaction should render checked checkbox" time="0.011">
    </testcase>
    <testcase classname="Checkbox checkbox interaction should fire onChange event on click on label" name="Checkbox checkbox interaction should fire onChange event on click on label" time="0.007">
    </testcase>
    <testcase classname="Checkbox Checkbox.Group renders checkbox in a grid group" name="Checkbox Checkbox.Group renders checkbox in a grid group" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="Calendar" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:30" time="0.843" tests="3">
    <testcase classname="Calendar renders" name="Calendar renders" time="0.163">
    </testcase>
    <testcase classname="Calendar when initial value is set renders value month" name="Calendar when initial value is set renders value month" time="0.029">
    </testcase>
    <testcase classname="Calendar when activeMonth is set renders active month" name="Calendar when activeMonth is set renders active month" time="0.038">
    </testcase>
  </testsuite>
  <testsuite name="DropdownArrow" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:30" time="0.262" tests="1">
    <testcase classname="DropdownArrow renders" name="DropdownArrow renders" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="ButtonSplit" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:30" time="1.212" tests="9">
    <testcase classname="ButtonSplit default render" name="ButtonSplit default render" time="0.039">
    </testcase>
    <testcase classname="ButtonSplit invokes onClick after a click on action button" name="ButtonSplit invokes onClick after a click on action button" time="0.013">
    </testcase>
    <testcase classname="ButtonSplit renders arrow up icon for an opened menu" name="ButtonSplit renders arrow up icon for an opened menu" time="0.108">
    </testcase>
    <testcase classname="ButtonSplit renders arrow down icon for a closed menu" name="ButtonSplit renders arrow down icon for a closed menu" time="0.066">
    </testcase>
    <testcase classname="ButtonSplit renders small arrow for small button" name="ButtonSplit renders small arrow for small button" time="0.016">
    </testcase>
    <testcase classname="ButtonSplit renders small arrow for medium button" name="ButtonSplit renders small arrow for medium button" time="0.02">
    </testcase>
    <testcase classname="ButtonSplit renders small arrow for large button" name="ButtonSplit renders small arrow for large button" time="0.009">
    </testcase>
    <testcase classname="ButtonSplit closes menu on click to the item" name="ButtonSplit closes menu on click to the item" time="0.239">
    </testcase>
    <testcase classname="ButtonSplit invokes a menu item handler on click to the item" name="ButtonSplit invokes a menu item handler on click to the item" time="0.238">
    </testcase>
  </testsuite>
  <testsuite name="Container" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:31" time="0.513" tests="1">
    <testcase classname="Container renders default container" name="Container renders default container" time="0.073">
    </testcase>
  </testsuite>
  <testsuite name="Dropdown" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:31" time="1.097" tests="4">
    <testcase classname="Dropdown renders" name="Dropdown renders" time="0.025">
    </testcase>
    <testcase classname="Dropdown should render menu" name="Dropdown should render menu" time="0.074">
    </testcase>
    <testcase classname="Dropdown should render menu with focus" name="Dropdown should render menu with focus" time="0.063">
    </testcase>
    <testcase classname="Dropdown should trigger `onOpen`, `onClose` callbacks" name="Dropdown should trigger `onOpen`, `onClose` callbacks" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="FileInput" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:31" time="0.797" tests="2">
    <testcase classname="FileInput renders" name="FileInput renders" time="0.036">
    </testcase>
    <testcase classname="FileInput can change label" name="FileInput can change label" time="0.044">
    </testcase>
  </testsuite>
  <testsuite name="Dropzone" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:31" time="1.044" tests="6">
    <testcase classname="Dropzone renders" name="Dropzone renders" time="0.072">
    </testcase>
    <testcase classname="Dropzone shows error" name="Dropzone shows error" time="0.041">
    </testcase>
    <testcase classname="Dropzone renders hint" name="Dropzone renders hint" time="0.063">
    </testcase>
    <testcase classname="Dropzone when doesn&apos;t accept multiple files and there is already a file disables the dropzone" name="Dropzone when doesn&apos;t accept multiple files and there is already a file disables the dropzone" time="0.015">
    </testcase>
    <testcase classname="Dropzone when hideContentText is not provided render contentText" name="Dropzone when hideContentText is not provided render contentText" time="0.017">
    </testcase>
    <testcase classname="Dropzone when hideContentText is provided render contentText" name="Dropzone when hideContentText is provided render contentText" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="EnvironmentBanner" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:32" time="0.444" tests="3">
    <testcase classname="EnvironmentBanner development render" name="EnvironmentBanner development render" time="0.034">
    </testcase>
    <testcase classname="EnvironmentBanner production render" name="EnvironmentBanner production render" time="0.006">
    </testcase>
    <testcase classname="EnvironmentBanner render nothing in test environment" name="EnvironmentBanner render nothing in test environment" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="FileList" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:32" time="0.639" tests="1">
    <testcase classname="FileList renders" name="FileList renders" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="FieldRequirements" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:32" time="0.712" tests="2">
    <testcase classname="FieldRequirements default render" name="FieldRequirements default render" time="0.107">
    </testcase>
    <testcase classname="FieldRequirements renders error state" name="FieldRequirements renders error state" time="0.071">
    </testcase>
  </testsuite>
  <testsuite name="Form" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:33" time="0.168" tests="1">
    <testcase classname="Form renders" name="Form renders" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="FileListItem" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:32" time="0.711" tests="5">
    <testcase classname="FileListItem renders" name="FileListItem renders" time="0.057">
    </testcase>
    <testcase classname="FileListItem fires callback on remove" name="FileListItem fires callback on remove" time="0.107">
    </testcase>
    <testcase classname="FileListItem when file is uploading renders &apos;Uploading...&apos; label and progress bar" name="FileListItem when file is uploading renders &apos;Uploading...&apos; label and progress bar" time="0.006">
    </testcase>
    <testcase classname="FileListItem when file is uploading when error exists renders file name and error message" name="FileListItem when file is uploading when error exists renders file name and error message" time="0.006">
    </testcase>
    <testcase classname="FileListItem when error exists renders file name and error message" name="FileListItem when error exists renders file name and error message" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="DatePicker" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:30" time="3.054" tests="31">
    <testcase classname="DatePicker renders" name="DatePicker renders" time="0.069">
    </testcase>
    <testcase classname="DatePicker custom day rendering" name="DatePicker custom day rendering" time="0.809">
    </testcase>
    <testcase classname="DatePicker Input should display date in default displayDateFormat" name="DatePicker Input should display date in default displayDateFormat" time="0.016">
    </testcase>
    <testcase classname="DatePicker Input should display date in given displayDateFormat" name="DatePicker Input should display date in given displayDateFormat" time="0.019">
    </testcase>
    <testcase classname="DatePicker Input should display date range in default displayDateFormat" name="DatePicker Input should display date range in default displayDateFormat" time="0.02">
    </testcase>
    <testcase classname="DatePicker Input should display date range in given displayDateFormat" name="DatePicker Input should display date range in given displayDateFormat" time="0.012">
    </testcase>
    <testcase classname="DatePicker Input should display date in default editDateFormat" name="DatePicker Input should display date in default editDateFormat" time="0.15">
    </testcase>
    <testcase classname="DatePicker Input should display date in given editDateFormat" name="DatePicker Input should display date in given editDateFormat" time="0.11">
    </testcase>
    <testcase classname="DatePicker Input should turn autoComplete off by default" name="DatePicker Input should turn autoComplete off by default" time="0.019">
    </testcase>
    <testcase classname="DatePicker Input should turn autoComplete on" name="DatePicker Input should turn autoComplete on" time="0.027">
    </testcase>
    <testcase classname="DatePicker Input should display date in given timezone" name="DatePicker Input should display date in given timezone" time="0.032">
    </testcase>
    <testcase classname="DatePicker Input should work within interval" name="DatePicker Input should work within interval" time="0.025">
    </testcase>
    <testcase classname="DatePicker Input should work with minDate only" name="DatePicker Input should work with minDate only" time="0.014">
    </testcase>
    <testcase classname="DatePicker Input should work with maxDate" name="DatePicker Input should work with maxDate" time="0.018">
    </testcase>
    <testcase classname="DatePicker Input when `range` property is set should resets value when input content removed" name="DatePicker Input when `range` property is set should resets value when input content removed" time="0.016">
    </testcase>
    <testcase classname="DatePicker Input should work with `parseInputValue` when parser returns parsed date calls `onChange` handler with the parsed date" name="DatePicker Input should work with `parseInputValue` when parser returns parsed date calls `onChange` handler with the parsed date" time="0.011">
    </testcase>
    <testcase classname="DatePicker Input should work with `parseInputValue` when parser returns parsed date outside of the `min/max` dates range does not call `onChange` handler" name="DatePicker Input should work with `parseInputValue` when parser returns parsed date outside of the `min/max` dates range does not call `onChange` handler" time="0.013">
    </testcase>
    <testcase classname="DatePicker Input should work with `parseInputValue` when parser cannot parse date does not call `onChange` handler" name="DatePicker Input should work with `parseInputValue` when parser cannot parse date does not call `onChange` handler" time="0.013">
    </testcase>
    <testcase classname="DatePicker Input should work with `parseInputValue` when `range` property is set does not call `parseInputValue` function" name="DatePicker Input should work with `parseInputValue` when `range` property is set does not call `parseInputValue` function" time="0.012">
    </testcase>
    <testcase classname="DatePicker Input should work with `parseInputValue` when valid string date value is typed does not call `parseInputValue` function" name="DatePicker Input should work with `parseInputValue` when valid string date value is typed does not call `parseInputValue` function" time="0.015">
    </testcase>
    <testcase classname="DatePicker Input when `enableReset` option is passed should reset input value on reset button click" name="DatePicker Input when `enableReset` option is passed should reset input value on reset button click" time="0.1">
    </testcase>
    <testcase classname="DatePicker Calendar should display date in given timezone" name="DatePicker Calendar should display date in given timezone" time="0.064">
    </testcase>
    <testcase classname="DatePicker Calendar should display date in given timezone" name="DatePicker Calendar should display date in given timezone" time="0.047">
    </testcase>
    <testcase classname="DatePicker Calendar should display date in given timezone" name="DatePicker Calendar should display date in given timezone" time="0.046">
    </testcase>
    <testcase classname="DatePicker Calendar should display date in given timezone after day click" name="DatePicker Calendar should display date in given timezone after day click" time="0.112">
    </testcase>
    <testcase classname="DatePicker Calendar should display date in given timezone after day click" name="DatePicker Calendar should display date in given timezone after day click" time="0.104">
    </testcase>
    <testcase classname="DatePicker Calendar should display date in given timezone after day click" name="DatePicker Calendar should display date in given timezone after day click" time="0.098">
    </testcase>
    <testcase classname="DatePicker Calendar when `enableReset` option is passed should not close calendar on `reset` button click" name="DatePicker Calendar when `enableReset` option is passed should not close calendar on `reset` button click" time="0.068">
    </testcase>
    <testcase classname="DatePicker Calendar when `enableReset` option is passed should not open calendar on `reset` button click" name="DatePicker Calendar when `enableReset` option is passed should not open calendar on `reset` button click" time="0.06">
    </testcase>
    <testcase classname="DatePicker Calendar when `footer` option is passed should appear a footer at the bottom of the calendar" name="DatePicker Calendar when `footer` option is passed should appear a footer at the bottom of the calendar" time="0.048">
    </testcase>
    <testcase classname="DatePicker Calendar when `footer` option is passed when `footerBackgroundColor` option is passed should appear a custom color footer at the bottom of the calendar" name="DatePicker Calendar when `footer` option is passed when `footerBackgroundColor` option is passed should appear a custom color footer at the bottom of the calendar" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="FormAutoSaveIndicator" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:33" time="0.388" tests="3">
    <testcase classname="FormAutoSaveIndicator in initial state hides label" name="FormAutoSaveIndicator in initial state hides label" time="0.03">
    </testcase>
    <testcase classname="FormAutoSaveIndicator when saving hides label" name="FormAutoSaveIndicator when saving hides label" time="0.011">
    </testcase>
    <testcase classname="FormAutoSaveIndicator when saved should show label" name="FormAutoSaveIndicator when saved should show label" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="FormField" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:33" time="0.362" tests="1">
    <testcase classname="FormField renders" name="FormField renders" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="FormError" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:33" time="0.613" tests="1">
    <testcase classname="FormError renders" name="FormError renders" time="0.059">
    </testcase>
  </testsuite>
  <testsuite name="FormHint" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:33" time="0.491" tests="1">
    <testcase classname="FormHint renders" name="FormHint renders" time="0.05">
    </testcase>
  </testsuite>
  <testsuite name="FormLabel" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:33" time="0.614" tests="6">
    <testcase classname="FormLabel renders" name="FormLabel renders" time="0.054">
    </testcase>
    <testcase classname="FormLabel disabled" name="FormLabel disabled" time="0.014">
    </testcase>
    <testcase classname="FormLabel required with (optional)" name="FormLabel required with (optional)" time="0.009">
    </testcase>
    <testcase classname="FormLabel required with asterisk" name="FormLabel required with asterisk" time="0.008">
    </testcase>
    <testcase classname="FormLabel should transform text to title case when Picasso titleCase property is true" name="FormLabel should transform text to title case when Picasso titleCase property is true" time="0.008">
    </testcase>
    <testcase classname="FormLabel should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="FormLabel should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Grid" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:33" time="0.713" tests="1">
    <testcase classname="Grid renders" name="Grid renders" time="0.04">
    </testcase>
  </testsuite>
  <testsuite name="GridItem" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:34" time="0.764" tests="1">
    <testcase classname="GridItem renders" name="GridItem renders" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="Indicator" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:34" time="0.417" tests="1">
    <testcase classname="Indicator renders in red color" name="Indicator renders in red color" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="Helpbox" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:34" time="0.731" tests="1">
    <testcase classname="Helpbox renders" name="Helpbox renders" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="Image" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:34" time="0.208" tests="2">
    <testcase classname="Image renders" name="Image renders" time="0.015">
    </testcase>
    <testcase classname="Image circular variant render" name="Image circular variant render" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Link" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:34" time="0.406" tests="8">
    <testcase classname="Link renders" name="Link renders" time="0.021">
    </testcase>
    <testcase classname="Link renders native attributes" name="Link renders native attributes" time="0.007">
    </testcase>
    <testcase classname="Link renders a Link from react-router" name="Link renders a Link from react-router" time="0.011">
    </testcase>
    <testcase classname="Link renders disabled link" name="Link renders disabled link" time="0.004">
    </testcase>
    <testcase classname="Link adds rel=&quot;noopener&quot; to target=&quot;_blank&quot; links in its absence" name="Link adds rel=&quot;noopener&quot; to target=&quot;_blank&quot; links in its absence" time="0.004">
    </testcase>
    <testcase classname="Link does not add rel=&quot;noopener&quot; to target=&quot;_blank&quot; if noreferrer is present" name="Link does not add rel=&quot;noopener&quot; to target=&quot;_blank&quot; if noreferrer is present" time="0.005">
    </testcase>
    <testcase classname="Link does not allow onClick when disabled" name="Link does not allow onClick when disabled" time="0.007">
    </testcase>
    <testcase classname="Link does not have href when disabled" name="Link does not have href when disabled" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Loader" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="0.337" tests="1">
    <testcase classname="Loader props combo" name="Loader props combo" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="Input" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:34" time="0.799" tests="12">
    <testcase classname="Input renders icon in the end" name="Input renders icon in the end" time="0.032">
    </testcase>
    <testcase classname="Input renders icon in the beginning" name="Input renders icon in the beginning" time="0.011">
    </testcase>
    <testcase classname="Input shows counter for regular input" name="Input shows counter for regular input" time="0.006">
    </testcase>
    <testcase classname="Input shows counter for multiline input" name="Input shows counter for multiline input" time="0.029">
    </testcase>
    <testcase classname="Input shows remaining chars for for multiline input with limit" name="Input shows remaining chars for for multiline input with limit" time="0.015">
    </testcase>
    <testcase classname="Input shows excess chars for multiline input with exceeded limit" name="Input shows excess chars for multiline input with exceeded limit" time="0.018">
    </testcase>
    <testcase classname="Input shows entered characters for multiline input with `counter: entered`, ignoring the limit" name="Input shows entered characters for multiline input with `counter: entered`, ignoring the limit" time="0.012">
    </testcase>
    <testcase classname="Input is focused when autoFocus" name="Input is focused when autoFocus" time="0.01">
    </testcase>
    <testcase classname="Input should show reset button" name="Input should show reset button" time="0.015">
    </testcase>
    <testcase classname="Input should show manual resize handler" name="Input should show manual resize handler" time="0.014">
    </testcase>
    <testcase classname="Input handles clicks" name="Input handles clicks" time="0.008">
    </testcase>
    <testcase classname="Input when in a valid state shows valid icon" name="Input when in a valid state shows valid icon" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="List" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="0.601" tests="2">
    <testcase classname="List renders unordered list" name="List renders unordered list" time="0.032">
    </testcase>
    <testcase classname="List renders ordered list" name="List renders ordered list" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="InputLimitAdornment" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="0.297" tests="5">
    <testcase classname="InputLimitAdornment when counter type is &apos;entered&apos; expect &apos;1 character entered&apos; message for 1 characters" name="InputLimitAdornment when counter type is &apos;entered&apos; expect &apos;1 character entered&apos; message for 1 characters" time="0.018">
    </testcase>
    <testcase classname="InputLimitAdornment when counter type is &apos;entered&apos; expect &apos;2 characters entered&apos; message for 2 characters" name="InputLimitAdornment when counter type is &apos;entered&apos; expect &apos;2 characters entered&apos; message for 2 characters" time="0.007">
    </testcase>
    <testcase classname="InputLimitAdornment when counter type is &apos;remaining&apos; expect &apos;0 characters left&apos; message for 0 characters" name="InputLimitAdornment when counter type is &apos;remaining&apos; expect &apos;0 characters left&apos; message for 0 characters" time="0.004">
    </testcase>
    <testcase classname="InputLimitAdornment when counter type is &apos;remaining&apos; expect &apos;1 character left&apos; message for 1 characters" name="InputLimitAdornment when counter type is &apos;remaining&apos; expect &apos;1 character left&apos; message for 1 characters" time="0.003">
    </testcase>
    <testcase classname="InputLimitAdornment when counter type is &apos;remaining&apos; expect &apos;2 characters left&apos; message for 2 characters" name="InputLimitAdornment when counter type is &apos;remaining&apos; expect &apos;2 characters left&apos; message for 2 characters" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getAvatarAttributes" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="0.445" tests="14">
    <testcase classname="getAvatarAttributes returns xsmall avatar variant by default" name="getAvatarAttributes returns xsmall avatar variant by default" time="0.001">
    </testcase>
    <testcase classname="getAvatarAttributes supports all avatar size variants" name="getAvatarAttributes supports all avatar size variants" time="0.001">
    </testcase>
    <testcase classname="getIconAttributes supports circular icons" name="getIconAttributes supports circular icons" time="0.001">
    </testcase>
    <testcase classname="getIconAttributes supports all icons size variants" name="getIconAttributes supports all icons size variants" time="0">
    </testcase>
    <testcase classname="getImageAttributes supports circular images" name="getImageAttributes supports circular images" time="0.001">
    </testcase>
    <testcase classname="getImageAttributes does not convert number widths" name="getImageAttributes does not convert number widths" time="0">
    </testcase>
    <testcase classname="getImageAttributes converts rem strings to pixel numbers" name="getImageAttributes converts rem strings to pixel numbers" time="0">
    </testcase>
    <testcase classname="getAttributes returns icon attributes" name="getAttributes returns icon attributes" time="0">
    </testcase>
    <testcase classname="getAttributes returns avatar attributes" name="getAttributes returns avatar attributes" time="0">
    </testcase>
    <testcase classname="getAttributes returns image attributes" name="getAttributes returns image attributes" time="0">
    </testcase>
    <testcase classname="MediaSkeletonLoader supports custom classname and style attributes" name="MediaSkeletonLoader supports custom classname and style attributes" time="0.016">
    </testcase>
    <testcase classname="MediaSkeletonLoader renders avatar variants" name="MediaSkeletonLoader renders avatar variants" time="0.008">
    </testcase>
    <testcase classname="MediaSkeletonLoader renders icon variants" name="MediaSkeletonLoader renders icon variants" time="0.005">
    </testcase>
    <testcase classname="MediaSkeletonLoader renders image variants" name="MediaSkeletonLoader renders image variants" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Menu" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="0.44" tests="1">
    <testcase classname="Menu renders" name="Menu renders" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="MenuItem" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="0.663" tests="6">
    <testcase classname="MenuItem renders" name="MenuItem renders" time="0.029">
    </testcase>
    <testcase classname="MenuItem renders checkmarked" name="MenuItem renders checkmarked" time="0.01">
    </testcase>
    <testcase classname="MenuItem renders with description" name="MenuItem renders with description" time="0.007">
    </testcase>
    <testcase classname="MenuItem renders with a sub menu arrow" name="MenuItem renders with a sub menu arrow" time="0.009">
    </testcase>
    <testcase classname="MenuItem renders in title case with local prop" name="MenuItem renders in title case with local prop" time="0.006">
    </testcase>
    <testcase classname="MenuItem renders in title case with global prop" name="MenuItem renders in title case with global prop" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="NativeSelect" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="0.551" tests="2">
    <testcase classname="NativeSelect renders native select" name="NativeSelect renders native select" time="0.044">
    </testcase>
    <testcase classname="NativeSelect renders native select with the empty option enabled when enableReset is `true`" name="NativeSelect renders native select with the empty option enabled when enableReset is `true`" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="MonthSelect" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="0.592" tests="2">
    <testcase classname="MonthSelect renders" name="MonthSelect renders" time="0.036">
    </testcase>
    <testcase classname="MonthSelect wrong range" name="MonthSelect wrong range" time="0.05">
    </testcase>
  </testsuite>
  <testsuite name="NativeSelectPlaceholder" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:36" time="0.278" tests="3">
    <testcase classname="NativeSelectPlaceholder renders" name="NativeSelectPlaceholder renders" time="0.016">
    </testcase>
    <testcase classname="NativeSelectPlaceholder renders with emptySelectValue" name="NativeSelectPlaceholder renders with emptySelectValue" time="0.004">
    </testcase>
    <testcase classname="NativeSelectPlaceholder renders disabled" name="NativeSelectPlaceholder renders disabled" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Modal" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:35" time="1.044" tests="11">
    <testcase classname="Modal renders" name="Modal renders" time="0.05">
    </testcase>
    <testcase classname="Modal useModal opens and closes modal" name="Modal useModal opens and closes modal" time="0.332">
    </testcase>
    <testcase classname="Modal given multiple modals are opened, when navigate from page then all modals should be closed" name="Modal given multiple modals are opened, when navigate from page then all modals should be closed" time="0.021">
    </testcase>
    <testcase classname="Modal useModal shows multiple modals at the same time" name="Modal useModal shows multiple modals at the same time" time="0.015">
    </testcase>
    <testcase classname="Modal body scroll lock drops scroll lock when initially open modal is mounted" name="Modal body scroll lock drops scroll lock when initially open modal is mounted" time="0.015">
    </testcase>
    <testcase classname="Modal body scroll lock does not drop scroll lock when closed modal is mounted" name="Modal body scroll lock does not drop scroll lock when closed modal is mounted" time="0.003">
    </testcase>
    <testcase classname="Modal body scroll lock drops scroll lock as modal opens and lifts it as modal closes always mounted modal" name="Modal body scroll lock drops scroll lock as modal opens and lifts it as modal closes always mounted modal" time="0.023">
    </testcase>
    <testcase classname="Modal body scroll lock drops scroll lock as modal opens and lifts it as modal closes conditionally mounted modal" name="Modal body scroll lock drops scroll lock as modal opens and lifts it as modal closes conditionally mounted modal" time="0.015">
    </testcase>
    <testcase classname="Modal body scroll lock drops scroll lock as modal opens and lifts it as modal closes restores prev body overflow value" name="Modal body scroll lock drops scroll lock as modal opens and lifts it as modal closes restores prev body overflow value" time="0.015">
    </testcase>
    <testcase classname="Modal body scroll lock multiple modals properly manages body scroll lock as modals open/close" name="Modal body scroll lock multiple modals properly manages body scroll lock as modals open/close" time="0.025">
    </testcase>
    <testcase classname="Modal body scroll lock multiple modals properly restores body overflow when closed modal mounts/unmounts" name="Modal body scroll lock multiple modals properly restores body overflow when closed modal mounts/unmounts" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="NativeSelectOptions" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:36" time="0.456" tests="1">
    <testcase classname="NativeSelectOptions renders" name="NativeSelectOptions renders" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="NonNativeSelectLoader" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:36" time="0.538" tests="1">
    <testcase classname="NonNativeSelectLoader renders" name="NonNativeSelectLoader renders" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="NonNativeSelectOption" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:36" time="0.545" tests="3">
    <testcase classname="NonNativeSelectOption renders" name="NonNativeSelectOption renders" time="0.029">
    </testcase>
    <testcase classname="NonNativeSelectOption sets attributes correctly" name="NonNativeSelectOption sets attributes correctly" time="0.029">
    </testcase>
    <testcase classname="NonNativeSelectOption fires events correctly" name="NonNativeSelectOption fires events correctly" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="NonNativeSelectOptions" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:36" time="0.578" tests="3">
    <testcase classname="NonNativeSelectOptions renders" name="NonNativeSelectOptions renders" time="0.038">
    </testcase>
    <testcase classname="NonNativeSelectOptions renders option groups" name="NonNativeSelectOptions renders option groups" time="0.052">
    </testcase>
    <testcase classname="NonNativeSelectOptions renders no option" name="NonNativeSelectOptions renders no option" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Note" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:37" time="0.389" tests="1">
    <testcase classname="Note renders" name="Note renders" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="NonNativeSelectLimitFooter" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:37" time="0.543" tests="2">
    <testcase classname="NonNativeSelectLimitFooter renders null when no overflow" name="NonNativeSelectLimitFooter renders null when no overflow" time="0.023">
    </testcase>
    <testcase classname="NonNativeSelectLimitFooter renders footer when overflow" name="NonNativeSelectLimitFooter renders footer when overflow" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="NotificationActions" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:37" time="0.496" tests="1">
    <testcase classname="NotificationActions renders" name="NotificationActions renders" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="NonNativeSelect" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:36" time="1.646" tests="30">
    <testcase classname="NonNativeSelect renders" name="NonNativeSelect renders" time="0.034">
    </testcase>
    <testcase classname="NonNativeSelect opens menu on select click" name="NonNativeSelect opens menu on select click" time="0.082">
    </testcase>
    <testcase classname="NonNativeSelect does not open menu on select focus" name="NonNativeSelect does not open menu on select focus" time="0.008">
    </testcase>
    <testcase classname="NonNativeSelect opens menu when select is focused and arrow down is pressed" name="NonNativeSelect opens menu when select is focused and arrow down is pressed" time="0.045">
    </testcase>
    <testcase classname="NonNativeSelect shows loader instead of options when opened in loading state" name="NonNativeSelect shows loader instead of options when opened in loading state" time="0.036">
    </testcase>
    <testcase classname="NonNativeSelect filters options based on entered value to the input field" name="NonNativeSelect filters options based on entered value to the input field" time="0.072">
    </testcase>
    <testcase classname="NonNativeSelect shows all options when input value is wiped" name="NonNativeSelect shows all options when input value is wiped" time="0.106">
    </testcase>
    <testcase classname="NonNativeSelect focuses search input when tab is pressed" name="NonNativeSelect focuses search input when tab is pressed" time="0.069">
    </testcase>
    <testcase classname="NonNativeSelect focuses search input when a character is entered" name="NonNativeSelect focuses search input when a character is entered" time="0.044">
    </testcase>
    <testcase classname="NonNativeSelect closes menu when an option is selected" name="NonNativeSelect closes menu when an option is selected" time="0.033">
    </testcase>
    <testcase classname="NonNativeSelect closes opened menu after a click on select" name="NonNativeSelect closes opened menu after a click on select" time="0.032">
    </testcase>
    <testcase classname="NonNativeSelect renders noOptionText if there are no matching options" name="NonNativeSelect renders noOptionText if there are no matching options" time="0.052">
    </testcase>
    <testcase classname="NonNativeSelect renders description" name="NonNativeSelect renders description" time="0.046">
    </testcase>
    <testcase classname="NonNativeSelect renders custom options" name="NonNativeSelect renders custom options" time="0.04">
    </testcase>
    <testcase classname="NonNativeSelect keeps value in the hidden input when autofill is not enabled explicitly" name="NonNativeSelect keeps value in the hidden input when autofill is not enabled explicitly" time="0.01">
    </testcase>
    <testcase classname="NonNativeSelect allows browser autofilling by input name" name="NonNativeSelect allows browser autofilling by input name" time="0.006">
    </testcase>
    <testcase classname="NonNativeSelect renders custom selected option" name="NonNativeSelect renders custom selected option" time="0.005">
    </testcase>
    <testcase classname="NonNativeSelect highlights selected option on menu appear" name="NonNativeSelect highlights selected option on menu appear" time="0.031">
    </testcase>
    <testcase classname="NonNativeSelect when filterOptions is provided filters options" name="NonNativeSelect when filterOptions is provided filters options" time="0.048">
    </testcase>
    <testcase classname="NonNativeSelect when value prop is not updated after onChange doesn&apos;t change value" name="NonNativeSelect when value prop is not updated after onChange doesn&apos;t change value" time="0.025">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) fires onChange event with a single option" name="NonNativeSelect (multiple) fires onChange event with a single option" time="0.031">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) fires onChange event with multiple options" name="NonNativeSelect (multiple) fires onChange event with multiple options" time="0.032">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) renders list of selected options" name="NonNativeSelect (multiple) renders list of selected options" time="0.007">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) highlights first option if nothing is selected" name="NonNativeSelect (multiple) highlights first option if nothing is selected" time="0.032">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) highlights selected option when only one option is selected" name="NonNativeSelect (multiple) highlights selected option when only one option is selected" time="0.033">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) highlights first option when multiple options are selected" name="NonNativeSelect (multiple) highlights first option when multiple options are selected" time="0.031">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) does not close when an option is selected" name="NonNativeSelect (multiple) does not close when an option is selected" time="0.048">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) does not transform options text to title case when Picasso titleCase property is true" name="NonNativeSelect (multiple) does not transform options text to title case when Picasso titleCase property is true" time="0.006">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) renders selected option when options set dynamically" name="NonNativeSelect (multiple) renders selected option when options set dynamically" time="0.011">
    </testcase>
    <testcase classname="NonNativeSelect (multiple) renders reduced list of options if there are too many items to display" name="NonNativeSelect (multiple) renders reduced list of options if there are too many items to display" time="0.1">
    </testcase>
  </testsuite>
  <testsuite name="Notification" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:37" time="0.604" tests="6">
    <testcase classname="Notification renders" name="Notification renders" time="0.03">
    </testcase>
    <testcase classname="Notification has role &quot;alert&quot;" name="Notification has role &quot;alert&quot;" time="0.039">
    </testcase>
    <testcase classname="Notification has role &quot;alert&quot;" name="Notification has role &quot;alert&quot;" time="0.018">
    </testcase>
    <testcase classname="Notification has role &quot;alert&quot;" name="Notification has role &quot;alert&quot;" time="0.016">
    </testcase>
    <testcase classname="Notification has role &quot;alert&quot;" name="Notification has role &quot;alert&quot;" time="0.016">
    </testcase>
    <testcase classname="Notification calls onClose" name="Notification calls onClose" time="0.017">
    </testcase>
  </testsuite>
  <testsuite name="overview-block" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:37" time="0.54" tests="7">
    <testcase classname="overview-block should transform text to title case when Picasso titleCase property is true" name="overview-block should transform text to title case when Picasso titleCase property is true" time="0.023">
    </testcase>
    <testcase classname="overview-block should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="overview-block should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.007">
    </testcase>
    <testcase classname="overview-block when label is a ReactNode renders custom label" name="overview-block when label is a ReactNode renders custom label" time="0.006">
    </testcase>
    <testcase classname="overview-block when OnClick function is defined when `as` prop is defined render the element as `Link`" name="overview-block when OnClick function is defined when `as` prop is defined render the element as `Link`" time="0.006">
    </testcase>
    <testcase classname="overview-block when OnClick function is defined when `as` prop is undefined render the element as `button`" name="overview-block when OnClick function is defined when `as` prop is undefined render the element as `button`" time="0.006">
    </testcase>
    <testcase classname="overview-block when OnClick function is undefined renders the element as `div`" name="overview-block when OnClick function is undefined renders the element as `div`" time="0.01">
    </testcase>
    <testcase classname="overview-block when OnClick function is undefined renders the element as `Link`" name="overview-block when OnClick function is undefined renders the element as `Link`" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="OverlayBlockGroup" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:38" time="0.492" tests="1">
    <testcase classname="OverlayBlockGroup allows to render a single block" name="OverlayBlockGroup allows to render a single block" time="0.024">
    </testcase>
  </testsuite>
  <testsuite name="NumberInput" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:37" time="0.787" tests="8">
    <testcase classname="NumberInput renders" name="NumberInput renders" time="0.046">
    </testcase>
    <testcase classname="NumberInput increase value" name="NumberInput increase value" time="0.06">
    </testcase>
    <testcase classname="NumberInput decrease value" name="NumberInput decrease value" time="0.03">
    </testcase>
    <testcase classname="NumberInput near max/min limits increase value near max limit" name="NumberInput near max/min limits increase value near max limit" time="0.032">
    </testcase>
    <testcase classname="NumberInput near max/min limits decrease value near min limit" name="NumberInput near max/min limits decrease value near min limit" time="0.032">
    </testcase>
    <testcase classname="NumberInput near max/min limits decrease value when it is closer than step to max" name="NumberInput near max/min limits decrease value when it is closer than step to max" time="0.033">
    </testcase>
    <testcase classname="NumberInput near max/min limits increase value when it is closer to min than step" name="NumberInput near max/min limits increase value when it is closer to min than step" time="0.029">
    </testcase>
    <testcase classname="NumberInput when in a valid state shows valid icon" name="NumberInput when in a valid state shows valid icon" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="Page" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:38" time="0.492" tests="1">
    <testcase classname="Page renders" name="Page renders" time="0.019">
    </testcase>
  </testsuite>
  <testsuite name="PageAutocomplete" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:38" time="0.546" tests="1">
    <testcase classname="PageAutocomplete renders" name="PageAutocomplete renders" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="PageSidebar" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:38" time="0.533" tests="3">
    <testcase classname="PageSidebar renders" name="PageSidebar renders" time="0.032">
    </testcase>
    <testcase classname="PageSidebar with menu" name="PageSidebar with menu" time="0.01">
    </testcase>
    <testcase classname="PageSidebar with one normal and one bottom menu" name="PageSidebar with one normal and one bottom menu" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Page.TopBar" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:38" time="0.534" tests="3">
    <testcase classname="Page.TopBar renders" name="Page.TopBar renders" time="0.053">
    </testcase>
    <testcase classname="Page.TopBar render with link" name="Page.TopBar render with link" time="0.019">
    </testcase>
    <testcase classname="Page.TopBar render with custom logo" name="Page.TopBar render with custom logo" time="0.018">
    </testcase>
  </testsuite>
  <testsuite name="PageTopBarMenu" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:38" time="0.531" tests="1">
    <testcase classname="PageTopBarMenu renders" name="PageTopBarMenu renders" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="Pagination" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:38" time="0.398" tests="6">
    <testcase classname="Pagination renders" name="Pagination renders" time="0.046">
    </testcase>
    <testcase classname="Pagination renders disabled" name="Pagination renders disabled" time="0.013">
    </testcase>
    <testcase classname="Pagination renders nothing for 1 page" name="Pagination renders nothing for 1 page" time="0.002">
    </testcase>
    <testcase classname="Pagination renders nothing for 0 pages" name="Pagination renders nothing for 0 pages" time="0.004">
    </testcase>
    <testcase classname="Pagination ignores prev click when on first page" name="Pagination ignores prev click when on first page" time="0.012">
    </testcase>
    <testcase classname="Pagination ignores next click when on last page" name="Pagination ignores next click when on last page" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="Paper" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="0.329" tests="1">
    <testcase classname="Paper renders" name="Paper renders" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="ProgressBar" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="0.35" tests="2">
    <testcase classname="ProgressBar renders" name="ProgressBar renders" time="0.022">
    </testcase>
    <testcase classname="ProgressBar renders with percentage" name="ProgressBar renders with percentage" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="Popper" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="0.293" tests="4">
    <testcase classname="Popper when container prop is passed calls MUIPopper with passed container" name="Popper when container prop is passed calls MUIPopper with passed container" time="0.01">
    </testcase>
    <testcase classname="Popper when container prop is NOT passed calls MUIPopper with default root container" name="Popper when container prop is NOT passed calls MUIPopper with default root container" time="0.001">
    </testcase>
    <testcase classname="Popper when custom width prop is passed calls MUIPopper with custom width style" name="Popper when custom width prop is passed calls MUIPopper with custom width style" time="0.001">
    </testcase>
    <testcase classname="Popper when custom width prop is NOT passed when autoWidth prop is false calls MUIPopper without assigning width style" name="Popper when custom width prop is NOT passed when autoWidth prop is false calls MUIPopper without assigning width style" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PasswordInput" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="0.552" tests="2">
    <testcase classname="PasswordInput shows and hides password" name="PasswordInput shows and hides password" time="0.042">
    </testcase>
    <testcase classname="PasswordInput when in a valid state shows valid icon" name="PasswordInput when in a valid state shows valid icon" time="0.039">
    </testcase>
  </testsuite>
  <testsuite name="Quote" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="0.341" tests="1">
    <testcase classname="Quote renders" name="Quote renders" time="0.025">
    </testcase>
  </testsuite>
  <testsuite name="Radio" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="0.408" tests="7">
    <testcase classname="Radio disabled radio button renders disabled version" name="Radio disabled radio button renders disabled version" time="0.028">
    </testcase>
    <testcase classname="Radio disabled radio button disables radio events" name="Radio disabled radio button disables radio events" time="0.007">
    </testcase>
    <testcase classname="Radio radio button renders default radio button" name="Radio radio button renders default radio button" time="0.007">
    </testcase>
    <testcase classname="Radio radio button should transform label text to title case when Picasso titleCase property is true" name="Radio radio button should transform label text to title case when Picasso titleCase property is true" time="0.007">
    </testcase>
    <testcase classname="Radio radio button should not transform label text to title case when Picasso titleCase property is true but the component property overrides it" name="Radio radio button should not transform label text to title case when Picasso titleCase property is true but the component property overrides it" time="0.006">
    </testcase>
    <testcase classname="Radio Radio.Group renders radio in group" name="Radio Radio.Group renders radio in group" time="0.013">
    </testcase>
    <testcase classname="Radio Radio.Group renders radio in a grid group" name="Radio Radio.Group renders radio in a grid group" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="RatingIcon" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="0.485" tests="1">
    <testcase classname="RatingIcon renders" name="RatingIcon renders" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="RatingThumbs" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="0.541" tests="5">
    <testcase classname="RatingThumbs when value is undefined shows correct input checked" name="RatingThumbs when value is undefined shows correct input checked" time="0.032">
    </testcase>
    <testcase classname="RatingThumbs when value is true shows correct input checked" name="RatingThumbs when value is true shows correct input checked" time="0.007">
    </testcase>
    <testcase classname="RatingThumbs when value is false shows correct input checked" name="RatingThumbs when value is false shows correct input checked" time="0.005">
    </testcase>
    <testcase classname="RatingThumbs when clicking on a thumb label triggers onChange with the correct value and event" name="RatingThumbs when clicking on a thumb label triggers onChange with the correct value and event" time="0.007">
    </testcase>
    <testcase classname="RatingThumbs when not interactive doesn&apos;t trigger onChange" name="RatingThumbs when not interactive doesn&apos;t trigger onChange" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="scrollToSelection" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:40" time="0.606" tests="7">
    <testcase classname="scrollToSelection should not scroll when there is no selected index" name="scrollToSelection should not scroll when there is no selected index" time="0.002">
    </testcase>
    <testcase classname="scrollToSelection should not scroll when there is no select item" name="scrollToSelection should not scroll when there is no select item" time="0">
    </testcase>
    <testcase classname="scrollToSelection should not scroll when the selected item is visible" name="scrollToSelection should not scroll when the selected item is visible" time="0.001">
    </testcase>
    <testcase classname="scrollToSelection should scroll when the top of the selected item is not visible" name="scrollToSelection should scroll when the top of the selected item is not visible" time="0">
    </testcase>
    <testcase classname="scrollToSelection should scroll when the bottom of the selected item is not visible" name="scrollToSelection should scroll when the bottom of the selected item is not visible" time="0">
    </testcase>
    <testcase classname="ScrollMenu renders" name="ScrollMenu renders" time="0.032">
    </testcase>
    <testcase classname="ScrollMenu prevents mouseDown on list wrapper" name="ScrollMenu prevents mouseDown on list wrapper" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="Rating.Stars" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:40" time="0.586" tests="6">
    <testcase classname="Rating.Stars renders" name="Rating.Stars renders" time="0.039">
    </testcase>
    <testcase classname="Rating.Stars sets the given value" name="Rating.Stars sets the given value" time="0.007">
    </testcase>
    <testcase classname="Rating.Stars calls onChange" name="Rating.Stars calls onChange" time="0.009">
    </testcase>
    <testcase classname="Rating.Stars is not interactive" name="Rating.Stars is not interactive" time="0.009">
    </testcase>
    <testcase classname="Rating.Stars shows 5 icons by default" name="Rating.Stars shows 5 icons by default" time="0.006">
    </testcase>
    <testcase classname="Rating.Stars shows max number of icons" name="Rating.Stars shows max number of icons" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="PromptModal" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:39" time="1.294" tests="4">
    <testcase classname="PromptModal renders" name="PromptModal renders" time="0.074">
    </testcase>
    <testcase classname="PromptModal showPrompt opens and closes modal on Submit action" name="PromptModal showPrompt opens and closes modal on Submit action" time="0.337">
    </testcase>
    <testcase classname="PromptModal showPrompt with input returns result on Submit action" name="PromptModal showPrompt with input returns result on Submit action" time="0.362">
    </testcase>
    <testcase classname="PromptModal when unmounted while performing submit, should not do further state updates" name="PromptModal when unmounted while performing submit, should not do further state updates" time="0.03">
    </testcase>
  </testsuite>
  <testsuite name="Select" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:40" time="0.541" tests="2">
    <testcase classname="Select renders native" name="Select renders native" time="0.016">
    </testcase>
    <testcase classname="Select renders non native" name="Select renders non native" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Section" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:40" time="0.935" tests="6">
    <testcase classname="Section renders with title, subtitle, actions and content" name="Section renders with title, subtitle, actions and content" time="0.027">
    </testcase>
    <testcase classname="Section renders without header" name="Section renders without header" time="0.007">
    </testcase>
    <testcase classname="Section renders with only title" name="Section renders with only title" time="0.005">
    </testcase>
    <testcase classname="Section renders collapsible initially collapsed" name="Section renders collapsible initially collapsed" time="0.03">
    </testcase>
    <testcase classname="Section renders collapsible initially expanded" name="Section renders collapsible initially expanded" time="0.009">
    </testcase>
    <testcase classname="Section collapses and expands" name="Section collapses and expands" time="0.325">
    </testcase>
  </testsuite>
  <testsuite name="SelectCaret" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:40" time="0.515" tests="2">
    <testcase classname="SelectCaret renders" name="SelectCaret renders" time="0.021">
    </testcase>
    <testcase classname="SelectCaret renders disabled" name="SelectCaret renders disabled" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="when onToggle function is passed" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:40" time="0.497" tests="8">
    <testcase classname="when onToggle function is passed should call onToggle after clicking on the action link" name="when onToggle function is passed should call onToggle after clicking on the action link" time="0.036">
    </testcase>
    <testcase classname="ShowMore renders" name="ShowMore renders" time="0.017">
    </testcase>
    <testcase classname="ShowMore when show more link is clicked should render expanded version" name="ShowMore when show more link is clicked should render expanded version" time="0.018">
    </testcase>
    <testcase classname="ShowMore when initialExpanded prop is true should render expanded version" name="ShowMore when initialExpanded prop is true should render expanded version" time="0.01">
    </testcase>
    <testcase classname="ShowMore when initialExpanded prop is true when show less link is clicked should render collapsed version" name="ShowMore when initialExpanded prop is true when show less link is clicked should render collapsed version" time="0.012">
    </testcase>
    <testcase classname="ShowMore when disableToggle prop is true should render version without action link" name="ShowMore when disableToggle prop is true should render version without action link" time="0.013">
    </testcase>
    <testcase classname="ShowMore when custom showMore text is specified should render with custom action link" name="ShowMore when custom showMore text is specified should render with custom action link" time="0.022">
    </testcase>
    <testcase classname="ShowMore when custom lessText text is specified should render with custom action link" name="ShowMore when custom lessText text is specified should render with custom action link" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="SidebarLogo" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:41" time="0.65" tests="3">
    <testcase classname="SidebarLogo renders" name="SidebarLogo renders" time="0.022">
    </testcase>
    <testcase classname="SidebarLogo when sidebar is collapsed renders collapsed logo with children" name="SidebarLogo when sidebar is collapsed renders collapsed logo with children" time="0.032">
    </testcase>
    <testcase classname="SidebarLogo when sidebar is not collapsed renders full logo with children" name="SidebarLogo when sidebar is not collapsed renders full logo with children" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Slider" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:41" time="0.555" tests="2">
    <testcase classname="Slider renders" name="Slider renders" time="0.022">
    </testcase>
    <testcase classname="Slider with initial value" name="Slider with initial value" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="SidebarMenu" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:41" time="0.619" tests="2">
    <testcase classname="SidebarMenu renders" name="SidebarMenu renders" time="0.022">
    </testcase>
    <testcase classname="SidebarMenu with bottom" name="SidebarMenu with bottom" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="SidebarItem" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:41" time="0.805" tests="11">
    <testcase classname="SidebarItem renders" name="SidebarItem renders" time="0.037">
    </testcase>
    <testcase classname="SidebarItem with icon" name="SidebarItem with icon" time="0.012">
    </testcase>
    <testcase classname="SidebarItem is selected" name="SidebarItem is selected" time="0.016">
    </testcase>
    <testcase classname="SidebarItem use accordion for collapsible with menu" name="SidebarItem use accordion for collapsible with menu" time="0.03">
    </testcase>
    <testcase classname="SidebarItem collapsible menu is expanded when one of the children is selected" name="SidebarItem collapsible menu is expanded when one of the children is selected" time="0.033">
    </testcase>
    <testcase classname="SidebarItem collapsible menu is expanded when one of the children is selected and subMenu has a wrapper component" name="SidebarItem collapsible menu is expanded when one of the children is selected and subMenu has a wrapper component" time="0.025">
    </testcase>
    <testcase classname="SidebarItem don&apos;t use accordion for non-collapsible with menu" name="SidebarItem don&apos;t use accordion for non-collapsible with menu" time="0.014">
    </testcase>
    <testcase classname="SidebarItem should transform menu items text to title case when Picasso titleCase property is true" name="SidebarItem should transform menu items text to title case when Picasso titleCase property is true" time="0.01">
    </testcase>
    <testcase classname="SidebarItem should not transform menu items text to title case when Picasso titleCase property is true but the component property overrides it" name="SidebarItem should not transform menu items text to title case when Picasso titleCase property is true but the component property overrides it" time="0.013">
    </testcase>
    <testcase classname="SubMenuContextProvider when no provider available returns `isSubMenu` as false" name="SubMenuContextProvider when no provider available returns `isSubMenu` as false" time="0.005">
    </testcase>
    <testcase classname="SubMenuContextProvider when a provider available returns `isSubMenu` as true" name="SubMenuContextProvider when a provider available returns `isSubMenu` as true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Switch" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:42" time="0.418" tests="6">
    <testcase classname="Switch renders default Switch without label" name="Switch renders default Switch without label" time="0.03">
    </testcase>
    <testcase classname="Switch renders default Switch with label" name="Switch renders default Switch with label" time="0.01">
    </testcase>
    <testcase classname="Switch renders disabled state" name="Switch renders disabled state" time="0.008">
    </testcase>
    <testcase classname="Switch transforms text to title case when Picasso titleCase property is true" name="Switch transforms text to title case when Picasso titleCase property is true" time="0.006">
    </testcase>
    <testcase classname="Switch transforms text to title case when Picasso titleCase property is true but the component property overrides it" name="Switch transforms text to title case when Picasso titleCase property is true but the component property overrides it" time="0.012">
    </testcase>
    <testcase classname="Switch behaves correctly when interacting" name="Switch behaves correctly when interacting" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Stepper" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:41" time="0.599" tests="5">
    <testcase classname="Stepper renders" name="Stepper renders" time="0.033">
    </testcase>
    <testcase classname="Stepper render with all steps completed" name="Stepper render with all steps completed" time="0.012">
    </testcase>
    <testcase classname="Stepper render with hidden labels" name="Stepper render with hidden labels" time="0.018">
    </testcase>
    <testcase classname="Stepper should transform text to title case when Picasso titleCase property is true" name="Stepper should transform text to title case when Picasso titleCase property is true" time="0.01">
    </testcase>
    <testcase classname="Stepper should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="Stepper should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="StepperVertical" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:42" time="0.586" tests="4">
    <testcase classname="StepperVertical renders" name="StepperVertical renders" time="0.043">
    </testcase>
    <testcase classname="StepperVertical render with all steps completed" name="StepperVertical render with all steps completed" time="0.014">
    </testcase>
    <testcase classname="StepperVertical should transform text to title case when Picasso titleCase property is true" name="StepperVertical should transform text to title case when Picasso titleCase property is true" time="0.007">
    </testcase>
    <testcase classname="StepperVertical should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="StepperVertical should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Tab" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:42" time="0.588" tests="5">
    <testcase classname="Tab Tab renders" name="Tab Tab renders" time="0.032">
    </testcase>
    <testcase classname="Tab Tab disabled tab" name="Tab Tab disabled tab" time="0.007">
    </testcase>
    <testcase classname="Tab Tab tab with icon" name="Tab Tab tab with icon" time="0.006">
    </testcase>
    <testcase classname="Tab Tab should transform text to title case when Picasso titleCase property is true" name="Tab Tab should transform text to title case when Picasso titleCase property is true" time="0.006">
    </testcase>
    <testcase classname="Tab Tab should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="Tab Tab should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="TableCell" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:42" time="0.433" tests="1">
    <testcase classname="TableCell renders" name="TableCell renders" time="0.04">
    </testcase>
  </testsuite>
  <testsuite name="Table" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:42" time="0.519" tests="4">
    <testcase classname="Table renders" name="Table renders" time="0.05">
    </testcase>
    <testcase classname="Table sets attributes correctly" name="Table sets attributes correctly" time="0.031">
    </testcase>
    <testcase classname="Table when Picasso titleCase property is true when component does not override titleCase property should transform table header text to title case" name="Table when Picasso titleCase property is true when component does not override titleCase property should transform table header text to title case" time="0.01">
    </testcase>
    <testcase classname="Table when Picasso titleCase property is true when component overrides titleCase property should not transform table header text to title case" name="Table when Picasso titleCase property is true when component overrides titleCase property should not transform table header text to title case" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="TableCell" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:42" time="0.554" tests="6">
    <testcase classname="TableCell renders" name="TableCell renders" time="0.038">
    </testcase>
    <testcase classname="TableCell renders compact" name="TableCell renders compact" time="0.014">
    </testcase>
    <testcase classname="TableCell renders narrow" name="TableCell renders narrow" time="0.013">
    </testcase>
    <testcase classname="TableCell sets attribuites correctly" name="TableCell sets attribuites correctly" time="0.016">
    </testcase>
    <testcase classname="TableCell capitalizes in head if titleCase is truthy" name="TableCell capitalizes in head if titleCase is truthy" time="0.012">
    </testcase>
    <testcase classname="TableCell does not capitalize in head if titleCase is falsy" name="TableCell does not capitalize in head if titleCase is falsy" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="TableHead" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:42" time="0.658" tests="1">
    <testcase classname="TableHead renders" name="TableHead renders" time="0.047">
    </testcase>
  </testsuite>
  <testsuite name="TableFooter" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:42" time="0.924" tests="1">
    <testcase classname="TableFooter renders" name="TableFooter renders" time="0.035">
    </testcase>
  </testsuite>
  <testsuite name="TableSectionHead" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:43" time="0.758" tests="1">
    <testcase classname="TableSectionHead renders" name="TableSectionHead renders" time="0.033">
    </testcase>
  </testsuite>
  <testsuite name="TableRow" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:43" time="0.38" tests="1">
    <testcase classname="TableRow renders" name="TableRow renders" time="0.044">
    </testcase>
  </testsuite>
  <testsuite name="Tabs" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:43" time="0.996" tests="8">
    <testcase classname="Tabs renders" name="Tabs renders" time="0.053">
    </testcase>
    <testcase classname="Tabs renders in vertical orientation" name="Tabs renders in vertical orientation" time="0.014">
    </testcase>
    <testcase classname="Tabs renders with a pre-selected option" name="Tabs renders with a pre-selected option" time="0.012">
    </testcase>
    <testcase classname="Tabs renders with a pre-selected option using custom value" name="Tabs renders with a pre-selected option using custom value" time="0.017">
    </testcase>
    <testcase classname="Tabs fires onChange when clicked" name="Tabs fires onChange when clicked" time="0.01">
    </testcase>
    <testcase classname="Tabs fires onChange with custom value when clicked" name="Tabs fires onChange with custom value when clicked" time="0.01">
    </testcase>
    <testcase classname="Tabs doesnt fire onChange when disabled" name="Tabs doesnt fire onChange when disabled" time="0.013">
    </testcase>
    <testcase classname="Tabs renders in full width" name="Tabs renders in full width" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Tag" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:43" time="0.693" tests="9">
    <testcase classname="Tag renders `light-grey` variant" name="Tag renders `light-grey` variant" time="0.028">
    </testcase>
    <testcase classname="Tag renders `blue` variant" name="Tag renders `blue` variant" time="0.007">
    </testcase>
    <testcase classname="Tag should transform text to title case when Picasso titleCase property is true" name="Tag should transform text to title case when Picasso titleCase property is true" time="0.007">
    </testcase>
    <testcase classname="Tag should not transform text to title case when Picasso titleCase property is true but the component property overrides it" name="Tag should not transform text to title case when Picasso titleCase property is true but the component property overrides it" time="0.008">
    </testcase>
    <testcase classname="Tag dismissable label should render dismissable label" name="Tag dismissable label should render dismissable label" time="0.009">
    </testcase>
    <testcase classname="Tag dismissable label should fire onDelete event on dismiss action" name="Tag dismissable label should fire onDelete event on dismiss action" time="0.007">
    </testcase>
    <testcase classname="Tag renders with adornment" name="Tag renders with adornment" time="0.017">
    </testcase>
    <testcase classname="Tag renders with connection and icon" name="Tag renders with connection and icon" time="0.015">
    </testcase>
    <testcase classname="Tag renders with Link" name="Tag renders with Link" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="TagGroup" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:43" time="0.762" tests="1">
    <testcase classname="TagGroup should render label group with 4 labels" name="TagGroup should render label group with 4 labels" time="0.045">
    </testcase>
  </testsuite>
  <testsuite name="TagRectangular" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:44" time="0.631" tests="3">
    <testcase classname="TagRectangular renders rectangular Tag" name="TagRectangular renders rectangular Tag" time="0.027">
    </testcase>
    <testcase classname="TagRectangular when Picasso titleCase property is true transforms text to title case" name="TagRectangular when Picasso titleCase property is true transforms text to title case" time="0.008">
    </testcase>
    <testcase classname="TagRectangular when Picasso titleCase property is true but the component property overrides it does not transform text to title case" name="TagRectangular when Picasso titleCase property is true but the component property overrides it does not transform text to title case" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="TagSelector" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:43" time="1.295" tests="8">
    <testcase classname="TagSelector renders" name="TagSelector renders" time="0.049">
    </testcase>
    <testcase classname="TagSelector disabled render" name="TagSelector disabled render" time="0.016">
    </testcase>
    <testcase classname="TagSelector on type" name="TagSelector on type" time="0.123">
    </testcase>
    <testcase classname="TagSelector preselected value" name="TagSelector preselected value" time="0.043">
    </testcase>
    <testcase classname="TagSelector selected option" name="TagSelector selected option" time="0.176">
    </testcase>
    <testcase classname="TagSelector when in a valid state shows check icon" name="TagSelector when in a valid state shows check icon" time="0.056">
    </testcase>
    <testcase classname="filterOutSelectedOptions compares object&apos;s value attribute by default" name="filterOutSelectedOptions compares object&apos;s value attribute by default" time="0">
    </testcase>
    <testcase classname="filterOutSelectedOptions when custom getKey function is provided uses custom function" name="filterOutSelectedOptions when custom getKey function is provided uses custom function" time="0">
    </testcase>
  </testsuite>
  <testsuite name="TagSelectorInput" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:44" time="1.208" tests="1">
    <testcase classname="TagSelectorInput renders" name="TagSelectorInput renders" time="0.037">
    </testcase>
  </testsuite>
  <testsuite name="Timeline" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:44" time="0.874" tests="4">
    <testcase classname="Timeline renders" name="Timeline renders" time="0.035">
    </testcase>
    <testcase classname="Timeline renders without a connector" name="Timeline renders without a connector" time="0.011">
    </testcase>
    <testcase classname="Timeline renders with dates" name="Timeline renders with dates" time="0.015">
    </testcase>
    <testcase classname="Timeline renders with icons" name="Timeline renders with icons" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="TimePicker" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:44" time="1.11" tests="2">
    <testcase classname="TimePicker renders" name="TimePicker renders" time="0.048">
    </testcase>
    <testcase classname="TimePicker custom time rendering" name="TimePicker custom time rendering" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="Typography" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:45" time="0.439" tests="4">
    <testcase classname="Typography renders" name="Typography renders" time="0.024">
    </testcase>
    <testcase classname="Typography variant heading small render" name="Typography variant heading small render" time="0.017">
    </testcase>
    <testcase classname="Typography inherit size render" name="Typography inherit size render" time="0.005">
    </testcase>
    <testcase classname="Typography should transform text to title case when titleCase property is true" name="Typography should transform text to title case when titleCase property is true" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="TypographyOverflow" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:45" time="0.384" tests="4">
    <testcase classname="TypographyOverflow initial render renders only typography" name="TypographyOverflow initial render renders only typography" time="0.021">
    </testcase>
    <testcase classname="TypographyOverflow when overflow happened when mouse is entered a typography and mouse left the tooltip renders tooltip and then close it" name="TypographyOverflow when overflow happened when mouse is entered a typography and mouse left the tooltip renders tooltip and then close it" time="0.005">
    </testcase>
    <testcase classname="TypographyOverflow when overflow happened when mouse is NOT entered a typography does not render tooltip" name="TypographyOverflow when overflow happened when mouse is NOT entered a typography does not render tooltip" time="0.004">
    </testcase>
    <testcase classname="TypographyOverflow when tooltip is disabled does not render tooltip" name="TypographyOverflow when tooltip is disabled does not render tooltip" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="UserBadge" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:45" time="0.665" tests="8">
    <testcase classname="UserBadge renders" name="UserBadge renders" time="0.04">
    </testcase>
    <testcase classname="UserBadge small size" name="UserBadge small size" time="0.01">
    </testcase>
    <testcase classname="UserBadge manual center alignment" name="UserBadge manual center alignment" time="0.012">
    </testcase>
    <testcase classname="UserBadge auto center alignment" name="UserBadge auto center alignment" time="0.008">
    </testcase>
    <testcase classname="UserBadge override auto center alignment" name="UserBadge override auto center alignment" time="0.009">
    </testcase>
    <testcase classname="UserBadge invert render" name="UserBadge invert render" time="0.016">
    </testcase>
    <testcase classname="UserBadge custom name" name="UserBadge custom name" time="0.009">
    </testcase>
    <testcase classname="UserBadge custom title" name="UserBadge custom title" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Favicon" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:46" time="0.726" tests="3">
    <testcase classname="Favicon renders" name="Favicon renders" time="0.213">
    </testcase>
    <testcase classname="Favicon renders with environment specified" name="Favicon renders with environment specified" time="0.085">
    </testcase>
    <testcase classname="Favicon renders nothing in a test environment" name="Favicon renders nothing in a test environment" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="YearSelect" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:46" time="1.384" tests="3">
    <testcase classname="YearSelect renders" name="YearSelect renders" time="0.047">
    </testcase>
    <testcase classname="YearSelect render in descending order" name="YearSelect render in descending order" time="0.101">
    </testcase>
    <testcase classname="YearSelect wrong range" name="YearSelect wrong range" time="0.048">
    </testcase>
  </testsuite>
  <testsuite name="capitalize" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:46" time="1.16" tests="40">
    <testcase classname="capitalize should capitalize first letter" name="capitalize should capitalize first letter" time="0.001">
    </testcase>
    <testcase classname="getNameInitials should extract first letters" name="getNameInitials should extract first letters" time="0">
    </testcase>
    <testcase classname="getNameInitials should ignore extra spaces" name="getNameInitials should ignore extra spaces" time="0">
    </testcase>
    <testcase classname="getNameInitials should ignore single letter middle names" name="getNameInitials should ignore single letter middle names" time="0">
    </testcase>
    <testcase classname="getNameInitials should extract up to 3 letters" name="getNameInitials should extract up to 3 letters" time="0">
    </testcase>
    <testcase classname="isBoolean should return true for booleans" name="isBoolean should return true for booleans" time="0">
    </testcase>
    <testcase classname="isBoolean should return false for other types" name="isBoolean should return false for other types" time="0.006">
    </testcase>
    <testcase classname="isNumber should return true for numbers" name="isNumber should return true for numbers" time="0.001">
    </testcase>
    <testcase classname="isNumber should return false for other types" name="isNumber should return false for other types" time="0">
    </testcase>
    <testcase classname="isString should return true for strings" name="isString should return true for strings" time="0.001">
    </testcase>
    <testcase classname="isString should return false for other types" name="isString should return false for other types" time="0">
    </testcase>
    <testcase classname="toTitleCase should convert strings" name="toTitleCase should convert strings" time="0.001">
    </testcase>
    <testcase classname="toTitleCase should ignore react nodes" name="toTitleCase should ignore react nodes" time="0.001">
    </testcase>
    <testcase classname="isSubstring should check if a string contains another ignoring case" name="isSubstring should check if a string contains another ignoring case" time="0.001">
    </testcase>
    <testcase classname="kebabToCamelCase should convert kebab to camel case" name="kebabToCamelCase should convert kebab to camel case" time="0">
    </testcase>
    <testcase classname="sum returns the total of all numbers in an array" name="sum returns the total of all numbers in an array" time="0">
    </testcase>
    <testcase classname="useCombinedRefs should combine object and function refs" name="useCombinedRefs should combine object and function refs" time="0.017">
    </testcase>
    <testcase classname="forwardRef should forward a ref with generic component" name="forwardRef should forward a ref with generic component" time="0.003">
    </testcase>
    <testcase classname="useSafeState should use initial state" name="useSafeState should use initial state" time="0.005">
    </testcase>
    <testcase classname="useSafeState should set state in an async effect" name="useSafeState should set state in an async effect" time="0.007">
    </testcase>
    <testcase classname="useSafeState should not throw when state is set after unmounting" name="useSafeState should not throw when state is set after unmounting" time="0.003">
    </testcase>
    <testcase classname="useWidthOf should measure width of passed element" name="useWidthOf should measure width of passed element" time="0.003">
    </testcase>
    <testcase classname="disableUnsupportedProps should render with supported props" name="disableUnsupportedProps should render with supported props" time="0.01">
    </testcase>
    <testcase classname="disableUnsupportedProps should override unsupported props and warn the developer" name="disableUnsupportedProps should override unsupported props and warn the developer" time="0.01">
    </testcase>
    <testcase classname="isBrowser should return true if window is undefined" name="isBrowser should return true if window is undefined" time="0">
    </testcase>
    <testcase classname="isBrowser should return true for window is not undefined" name="isBrowser should return true for window is not undefined" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from string node returns its content original content, value: &apos;foo&apos;" name="getRectNodeTextContent when getting text from string node returns its content original content, value: &apos;foo&apos;" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from string node returns its content original content, value: &apos;&apos;" name="getRectNodeTextContent when getting text from string node returns its content original content, value: &apos;&apos;" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from string node strips spaces from start and end of the text" name="getRectNodeTextContent when getting text from string node strips spaces from start and end of the text" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from a number node returns its content original content, value: 42" name="getRectNodeTextContent when getting text from a number node returns its content original content, value: 42" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from a number node returns its content original content, value: -12" name="getRectNodeTextContent when getting text from a number node returns its content original content, value: -12" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from a number node returns its content original content, value: Infinity" name="getRectNodeTextContent when getting text from a number node returns its content original content, value: Infinity" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from a number node returns its content original content, value: NaN" name="getRectNodeTextContent when getting text from a number node returns its content original content, value: NaN" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from a number node returns its content original content, value: -0" name="getRectNodeTextContent when getting text from a number node returns its content original content, value: -0" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from a array node returns the contents of its elements joined by space" name="getRectNodeTextContent when getting text from a array node returns the contents of its elements joined by space" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from non printable nodes in react returns an empty string, value: &quot;null&quot;" name="getRectNodeTextContent when getting text from non printable nodes in react returns an empty string, value: &quot;null&quot;" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from non printable nodes in react returns an empty string, value: &quot;undefined&quot;" name="getRectNodeTextContent when getting text from non printable nodes in react returns an empty string, value: &quot;undefined&quot;" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from non printable nodes in react returns an empty string, value: &quot;true&quot;" name="getRectNodeTextContent when getting text from non printable nodes in react returns an empty string, value: &quot;true&quot;" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from non printable nodes in react returns an empty string, value: &quot;false&quot;" name="getRectNodeTextContent when getting text from non printable nodes in react returns an empty string, value: &quot;false&quot;" time="0">
    </testcase>
    <testcase classname="getRectNodeTextContent when getting text from a complex node returns it&apos;s children content recursively" name="getRectNodeTextContent when getting text from a complex node returns it&apos;s children content recursively" time="0">
    </testcase>
  </testsuite>
  <testsuite name="CategoriesChartTooltip" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:47" time="1.175" tests="2">
    <testcase classname="CategoriesChartTooltip renders nothing when not active" name="CategoriesChartTooltip renders nothing when not active" time="0.026">
    </testcase>
    <testcase classname="CategoriesChartTooltip renders tooltip when active and has payload" name="CategoriesChartTooltip renders tooltip when active and has payload" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="LexicalEmojiPlugin" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:48" time="0.305" tests="3">
    <testcase classname="LexicalEmojiPlugin registers commands on mount" name="LexicalEmojiPlugin registers commands on mount" time="0.009">
    </testcase>
    <testcase classname="LexicalEmojiPlugin inserts a text node when the native emoji command is called" name="LexicalEmojiPlugin inserts a text node when the native emoji command is called" time="0.001">
    </testcase>
    <testcase classname="LexicalEmojiPlugin inserts a custom emoji node when the custom emoji command is called" name="LexicalEmojiPlugin inserts a custom emoji node when the custom emoji command is called" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="LazyLexicalEditor" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:47" time="1.236" tests="2">
    <testcase classname="LazyLexicalEditor when LazyLexicalEditor is rendered displays QuillEditorView while LexicalEditor is loading" name="LazyLexicalEditor when LazyLexicalEditor is rendered displays QuillEditorView while LexicalEditor is loading" time="0.824">
    </testcase>
    <testcase classname="LazyLexicalEditor when LazyLexicalEditor is rendered displays LexicalEditor after it has loaded" name="LazyLexicalEditor when LazyLexicalEditor is rendered displays LexicalEditor after it has loaded" time="0.079">
    </testcase>
  </testsuite>
  <testsuite name="Px to rem units converter using the BASE font size by default" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:48" time="0.168" tests="9">
    <testcase classname="Px to rem units converter using the BASE font size by default converts 0px to rem" name="Px to rem units converter using the BASE font size by default converts 0px to rem" time="0.001">
    </testcase>
    <testcase classname="Px to rem units converter using the BASE font size by default converts 11px to rem" name="Px to rem units converter using the BASE font size by default converts 11px to rem" time="0.001">
    </testcase>
    <testcase classname="Px to rem units converter using the BASE font size by default converts 13px to rem" name="Px to rem units converter using the BASE font size by default converts 13px to rem" time="0">
    </testcase>
    <testcase classname="Px to rem units converter using the BASE font size by default converts 16px to rem" name="Px to rem units converter using the BASE font size by default converts 16px to rem" time="0">
    </testcase>
    <testcase classname="Px to rem units converter using the BASE font size by default converts 0.5px to rem" name="Px to rem units converter using the BASE font size by default converts 0.5px to rem" time="0">
    </testcase>
    <testcase classname="Px to rem units converter using the BASE font size by default supports formatting with a custom font size" name="Px to rem units converter using the BASE font size by default supports formatting with a custom font size" time="0">
    </testcase>
    <testcase classname="rem to px units converter using the BASE font size by default converts 0rem to px" name="rem to px units converter using the BASE font size by default converts 0rem to px" time="0">
    </testcase>
    <testcase classname="rem to px units converter using the BASE font size by default converts 0.6875rem to px" name="rem to px units converter using the BASE font size by default converts 0.6875rem to px" time="0">
    </testcase>
    <testcase classname="rem to px units converter using the BASE font size by default supports formatting with a custom font size" name="rem to px units converter using the BASE font size by default supports formatting with a custom font size" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="calculateTooltipPosition" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:48" time="0.128" tests="3">
    <testcase classname="calculateTooltipPosition should NOT flip the tooltip, keep the cursor position" name="calculateTooltipPosition should NOT flip the tooltip, keep the cursor position" time="0.001">
    </testcase>
    <testcase classname="calculateTooltipPosition should flip the tooltip to the left of the cursor" name="calculateTooltipPosition should flip the tooltip to the left of the cursor" time="0.001">
    </testcase>
    <testcase classname="calculateTooltipPosition should translate the tooltip to the chart (top or left) corner when it flips to outside of the screen" name="calculateTooltipPosition should translate the tooltip to the chart (top or left) corner when it flips to outside of the screen" time="0">
    </testcase>
  </testsuite>
  <testsuite name="RichTextEditor" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:48" time="0.381" tests="4">
    <testcase classname="RichTextEditor renders active RichTextEditor" name="RichTextEditor renders active RichTextEditor" time="0.018">
    </testcase>
    <testcase classname="RichTextEditor when disabled prop is true renders disabled RichTextEditor" name="RichTextEditor when disabled prop is true renders disabled RichTextEditor" time="0.004">
    </testcase>
    <testcase classname="RichTextEditor when minLength, maxLength, minLengthMessage, maxLengthMessage props are passed when counterError is true renders RichTextEditor with counter with error" name="RichTextEditor when minLength, maxLength, minLengthMessage, maxLengthMessage props are passed when counterError is true renders RichTextEditor with counter with error" time="0.004">
    </testcase>
    <testcase classname="RichTextEditor when minLength, maxLength, minLengthMessage, maxLengthMessage props are passed when counterError is false renders RichTextEditor with counter without error" name="RichTextEditor when minLength, maxLength, minLengthMessage, maxLengthMessage props are passed when counterError is false renders RichTextEditor with counter without error" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getChartTicks" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:48" time="0.124" tests="1">
    <testcase classname="getChartTicks get chart ticks" name="getChartTicks get chart ticks" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="LexicalEditor" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:47" time="1.344" tests="8">
    <testcase classname="LexicalEditor when LexicalEditor is rendered displays Editor core parts" name="LexicalEditor when LexicalEditor is rendered displays Editor core parts" time="0.023">
    </testcase>
    <testcase classname="LexicalEditor when LexicalEditor is rendered renders LexicalTextLengthPlugin with correct props" name="LexicalEditor when LexicalEditor is rendered renders LexicalTextLengthPlugin with correct props" time="0.013">
    </testcase>
    <testcase classname="LexicalEditor when LexicalEditor is rendered renders LexicalHeadingsReplacementPlugin" name="LexicalEditor when LexicalEditor is rendered renders LexicalHeadingsReplacementPlugin" time="0.006">
    </testcase>
    <testcase classname="LexicalEditor when LexicalEditor is rendered renders HistoryPlugin" name="LexicalEditor when LexicalEditor is rendered renders HistoryPlugin" time="0.006">
    </testcase>
    <testcase classname="LexicalEditor when LexicalEditor is rendered renders OnChangePlugin with correct props" name="LexicalEditor when LexicalEditor is rendered renders OnChangePlugin with correct props" time="0.005">
    </testcase>
    <testcase classname="LexicalEditor when LexicalEditor is rendered renders ToolbarPlugin with correct props" name="LexicalEditor when LexicalEditor is rendered renders ToolbarPlugin with correct props" time="0.004">
    </testcase>
    <testcase classname="LexicalEditor when disabled prop is passed renders ToolbarPlugin with disabled prop" name="LexicalEditor when disabled prop is passed renders ToolbarPlugin with disabled prop" time="0.003">
    </testcase>
    <testcase classname="LexicalEditor when customEmojis and plugins prop is passed renders ToolbarPlugin with correct props" name="LexicalEditor when customEmojis and plugins prop is passed renders ToolbarPlugin with correct props" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="toRechartsHighlightFormat" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.131" tests="1">
    <testcase classname="toRechartsHighlightFormat converts to rechart highlight format" name="toRechartsHighlightFormat converts to rechart highlight format" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="orderData" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.133" tests="1">
    <testcase classname="orderData orders chart data" name="orderData orders chart data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="on-value-change-decorator" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.161" tests="5">
    <testcase classname="on-value-change-decorator getChangedFields when subscribed fields is provided when subscribed fields are changed should return changed fields if values are not equal" name="on-value-change-decorator getChangedFields when subscribed fields is provided when subscribed fields are changed should return changed fields if values are not equal" time="0.001">
    </testcase>
    <testcase classname="on-value-change-decorator getChangedFields when subscribed fields is provided when subscribed fields are not changed should return empty object for fields" name="on-value-change-decorator getChangedFields when subscribed fields is provided when subscribed fields are not changed should return empty object for fields" time="0.001">
    </testcase>
    <testcase classname="on-value-change-decorator getChangedFields when subscribed fields is not provided when values are not equal should check all fields and return changed fields" name="on-value-change-decorator getChangedFields when subscribed fields is not provided when values are not equal should check all fields and return changed fields" time="0.001">
    </testcase>
    <testcase classname="on-value-change-decorator getChangedFields when subscribed fields is not provided should check all fields and return empty object if values are equal" name="on-value-change-decorator getChangedFields when subscribed fields is not provided should check all fields and return empty object if values are equal" time="0">
    </testcase>
    <testcase classname="on-value-change-decorator getChangedFields should do shallow comparison" name="on-value-change-decorator getChangedFields should do shallow comparison" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getFieldError" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.159" tests="6">
    <testcase classname="getFieldError when field has an error returns the error message" name="getFieldError when field has an error returns the error message" time="0.001">
    </testcase>
    <testcase classname="getFieldError when field has a submit error returns the submit error message" name="getFieldError when field has a submit error returns the submit error message" time="0">
    </testcase>
    <testcase classname="getFieldError when field has no error and no submit error and touched returns null" name="getFieldError when field has no error and no submit error and touched returns null" time="0">
    </testcase>
    <testcase classname="getFieldError when field has not been touched returns null" name="getFieldError when field has not been touched returns null" time="0">
    </testcase>
    <testcase classname="getFieldError when field has submit error and dirty since last submit returns null" name="getFieldError when field has submit error and dirty since last submit returns null" time="0.001">
    </testcase>
    <testcase classname="getFieldError when validate on submit enabled and modified since last submit returns null" name="getFieldError when validate on submit enabled and modified since last submit returns null" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useEnforceHighlightAutofill" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.362" tests="2">
    <testcase classname="useEnforceHighlightAutofill when form does not highlight autofilled fields does not enforce highlighting" name="useEnforceHighlightAutofill when form does not highlight autofilled fields does not enforce highlighting" time="0.017">
    </testcase>
    <testcase classname="useEnforceHighlightAutofill when form highlights autofilled fields highlighting is enforced after first update and not enforced after following updates" name="useEnforceHighlightAutofill when form highlights autofilled fields highlighting is enforced after first update and not enforced after following updates" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="useFormInputReset" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.153" tests="3">
    <testcase classname="useFormInputReset returns undefined when no reset button" name="useFormInputReset returns undefined when no reset button" time="0.006">
    </testcase>
    <testcase classname="useFormInputReset returns a default event handler when no special callback is sent" name="useFormInputReset returns a default event handler when no special callback is sent" time="0.001">
    </testcase>
    <testcase classname="useFormInputReset wraps the passed reset click handler if exists" name="useFormInputReset wraps the passed reset click handler if exists" time="0">
    </testcase>
  </testsuite>
  <testsuite name="findExtremeNodes" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.136" tests="3">
    <testcase classname="findExtremeNodes finds top-most and left-most nodes" name="findExtremeNodes finds top-most and left-most nodes" time="0.001">
    </testcase>
    <testcase classname="findExtremeNodes when empty array provided finds nothing" name="findExtremeNodes when empty array provided finds nothing" time="0">
    </testcase>
    <testcase classname="findExtremeNodes when top-most and left-most node is the same finds that node" name="findExtremeNodes when top-most and left-most node is the same finds that node" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useScrollableShades" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.167" tests="5">
    <testcase classname="useScrollableShades when no current object returns top = false and bottom = false" name="useScrollableShades when no current object returns top = false and bottom = false" time="0.006">
    </testcase>
    <testcase classname="useScrollableShades when clientHeight === scrollHeight returns top = false and bottom = false" name="useScrollableShades when clientHeight === scrollHeight returns top = false and bottom = false" time="0.001">
    </testcase>
    <testcase classname="useScrollableShades when sum of scrollTop and clientHeight less then scrollHeight returns top = true and bottom = true" name="useScrollableShades when sum of scrollTop and clientHeight less then scrollHeight returns top = true and bottom = true" time="0.002">
    </testcase>
    <testcase classname="useScrollableShades when sum of scrollTop and clientHeight not less then scrollHeight returns top = true and bottom = false" name="useScrollableShades when sum of scrollTop and clientHeight not less then scrollHeight returns top = true and bottom = false" time="0.001">
    </testcase>
    <testcase classname="useScrollableShades when scrollTop gives an edge value for a zoomed view returns top = true and bottom = false" name="useScrollableShades when scrollTop gives an edge value for a zoomed view returns top = true and bottom = false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useAutocomplete" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.394" tests="30">
    <testcase classname="useAutocomplete works" name="useAutocomplete works" time="0.006">
    </testcase>
    <testcase classname="useAutocomplete returns input props" name="useAutocomplete returns input props" time="0.003">
    </testcase>
    <testcase classname="useAutocomplete returns item props and selects the first item by default" name="useAutocomplete returns item props and selects the first item by default" time="0.002">
    </testcase>
    <testcase classname="useAutocomplete does not select if item has no display value" name="useAutocomplete does not select if item has no display value" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete prevents focus to be changed from autocomplete" name="useAutocomplete prevents focus to be changed from autocomplete" time="0">
    </testcase>
    <testcase classname="useAutocomplete returns other item props" name="useAutocomplete returns other item props" time="0.009">
    </testcase>
    <testcase classname="useAutocomplete shows other options if value is set" name="useAutocomplete shows other options if value is set" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete highlights element on hover" name="useAutocomplete highlights element on hover" time="0.002">
    </testcase>
    <testcase classname="useAutocomplete opens menu on input change" name="useAutocomplete opens menu on input change" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete resets value on reset click" name="useAutocomplete resets value on reset click" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete calls onResetClick callback on reset click" name="useAutocomplete calls onResetClick callback on reset click" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete closes menu on blur" name="useAutocomplete closes menu on blur" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete closes menu on item click" name="useAutocomplete closes menu on item click" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete keeps the menu open when `closeOnSelect` is disabled" name="useAutocomplete keeps the menu open when `closeOnSelect` is disabled" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete works with key presses opens menu on enter keypress" name="useAutocomplete works with key presses opens menu on enter keypress" time="0">
    </testcase>
    <testcase classname="useAutocomplete works with key presses opens menu on arrow up keypress" name="useAutocomplete works with key presses opens menu on arrow up keypress" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete works with key presses opens menu on arrow down keypress" name="useAutocomplete works with key presses opens menu on arrow down keypress" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete works with key presses opens menu on enter keypress if already open" name="useAutocomplete works with key presses opens menu on enter keypress if already open" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete works with key presses selects highlighted item on enter keypress" name="useAutocomplete works with key presses selects highlighted item on enter keypress" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete works with key presses closes menu on backspace keypress if value is empty" name="useAutocomplete works with key presses closes menu on backspace keypress if value is empty" time="0.001">
    </testcase>
    <testcase classname="useAutocomplete works with key presses does nothing on backspace keypress if value is not empty" name="useAutocomplete works with key presses does nothing on backspace keypress if value is not empty" time="0">
    </testcase>
    <testcase classname="useAutocomplete works with key presses closes menu on Escape keypress and resets value" name="useAutocomplete works with key presses closes menu on Escape keypress and resets value" time="0">
    </testcase>
    <testcase classname="getNextWrappingIndex works" name="getNextWrappingIndex works" time="0">
    </testcase>
    <testcase classname="getNextWrappingIndex returns initial index when movement is larger than item count" name="getNextWrappingIndex returns initial index when movement is larger than item count" time="0">
    </testcase>
    <testcase classname="getNextWrappingIndex returns initial index when no movement" name="getNextWrappingIndex returns initial index when no movement" time="0">
    </testcase>
    <testcase classname="getNextWrappingIndex handles backwards movements" name="getNextWrappingIndex handles backwards movements" time="0">
    </testcase>
    <testcase classname="getNextWrappingIndex handles negative initial index" name="getNextWrappingIndex handles negative initial index" time="0">
    </testcase>
    <testcase classname="getNextWrappingIndex normalizeInitialIndex works" name="getNextWrappingIndex normalizeInitialIndex works" time="0">
    </testcase>
    <testcase classname="getNextWrappingIndex normalizeInitialIndex handles negative index" name="getNextWrappingIndex normalizeInitialIndex handles negative index" time="0">
    </testcase>
    <testcase classname="getNextWrappingIndex normalizeInitialIndex index larger than item count" name="getNextWrappingIndex normalizeInitialIndex index larger than item count" time="0">
    </testcase>
  </testsuite>
  <testsuite name="responsive breakpoint utils" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.169" tests="30">
    <testcase classname="responsive breakpoint utils media query generation xs" name="responsive breakpoint utils media query generation xs" time="0.001">
    </testcase>
    <testcase classname="responsive breakpoint utils media query generation sm" name="responsive breakpoint utils media query generation sm" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils media query generation small medium" name="responsive breakpoint utils media query generation small medium" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils media query generation small medium large" name="responsive breakpoint utils media query generation small medium large" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks small breakpoint no screen size" name="responsive breakpoint utils screen size checks small breakpoint no screen size" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks small breakpoint on a small screen" name="responsive breakpoint utils screen size checks small breakpoint on a small screen" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks small breakpoint on a large screen" name="responsive breakpoint utils screen size checks small breakpoint on a large screen" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks medium breakpoint no screen size" name="responsive breakpoint utils screen size checks medium breakpoint no screen size" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks medium breakpoint on a small screen" name="responsive breakpoint utils screen size checks medium breakpoint on a small screen" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks medium breakpoint on a medium screen" name="responsive breakpoint utils screen size checks medium breakpoint on a medium screen" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks medium breakpoint on a large screen" name="responsive breakpoint utils screen size checks medium breakpoint on a large screen" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks large breakpoint on a medium screen" name="responsive breakpoint utils screen size checks large breakpoint on a medium screen" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks large breakpoint on a large screen" name="responsive breakpoint utils screen size checks large breakpoint on a large screen" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks extra large breakpoint on a  large screen" name="responsive breakpoint utils screen size checks extra large breakpoint on a  large screen" time="0">
    </testcase>
    <testcase classname="responsive breakpoint utils screen size checks extra large breakpoint on a extra large screen" name="responsive breakpoint utils screen size checks extra large breakpoint on a extra large screen" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils media query generation xs" name="non-responsive breakpoint utils media query generation xs" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils media query generation sm" name="non-responsive breakpoint utils media query generation sm" time="0.001">
    </testcase>
    <testcase classname="non-responsive breakpoint utils media query generation small medium" name="non-responsive breakpoint utils media query generation small medium" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils media query generation small medium large" name="non-responsive breakpoint utils media query generation small medium large" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks small breakpoint no screen size" name="non-responsive breakpoint utils screen size checks small breakpoint no screen size" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks small breakpoint on a small screen" name="non-responsive breakpoint utils screen size checks small breakpoint on a small screen" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks small breakpoint on a large screen" name="non-responsive breakpoint utils screen size checks small breakpoint on a large screen" time="0.001">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks medium breakpoint no screen size" name="non-responsive breakpoint utils screen size checks medium breakpoint no screen size" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks medium breakpoint on a small screen" name="non-responsive breakpoint utils screen size checks medium breakpoint on a small screen" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks medium breakpoint on a medium screen" name="non-responsive breakpoint utils screen size checks medium breakpoint on a medium screen" time="0.001">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks medium breakpoint on a large screen" name="non-responsive breakpoint utils screen size checks medium breakpoint on a large screen" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks large breakpoint on a medium screen" name="non-responsive breakpoint utils screen size checks large breakpoint on a medium screen" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks large breakpoint on a large screen" name="non-responsive breakpoint utils screen size checks large breakpoint on a large screen" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks extra large breakpoint on a  large screen" name="non-responsive breakpoint utils screen size checks extra large breakpoint on a  large screen" time="0">
    </testcase>
    <testcase classname="non-responsive breakpoint utils screen size checks extra large breakpoint on a extra large screen" name="non-responsive breakpoint utils screen size checks extra large breakpoint on a extra large screen" time="0">
    </testcase>
  </testsuite>
  <testsuite name="formatAmount" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.14" tests="12">
    <testcase classname="formatAmount when `locale` is defined formats `en-US` locale by default" name="formatAmount when `locale` is defined formats `en-US` locale by default" time="0.001">
    </testcase>
    <testcase classname="formatAmount when `locale` is `fr-FR` formats `fr-FR` locale" name="formatAmount when `locale` is `fr-FR` formats `fr-FR` locale" time="0">
    </testcase>
    <testcase classname="formatAmount when `EUR` currency provided formats EUR currency" name="formatAmount when `EUR` currency provided formats EUR currency" time="0">
    </testcase>
    <testcase classname="formatAmount when no currency provided formats USD currency by default" name="formatAmount when no currency provided formats USD currency by default" time="0">
    </testcase>
    <testcase classname="formatAmount when `amount` has 4 digits of decimals formats two digit of decimals USD amount" name="formatAmount when `amount` has 4 digits of decimals formats two digit of decimals USD amount" time="0.001">
    </testcase>
    <testcase classname="formatAmount when `amount` is negative formats negative USD amount" name="formatAmount when `amount` is negative formats negative USD amount" time="0">
    </testcase>
    <testcase classname="formatAmount when `amount` is zero formats zero USD amount" name="formatAmount when `amount` is zero formats zero USD amount" time="0">
    </testcase>
    <testcase classname="formatAmount when `amount` is string formats amount as a number" name="formatAmount when `amount` is string formats amount as a number" time="0">
    </testcase>
    <testcase classname="formatAmount options displays decimals when options are not provided" name="formatAmount options displays decimals when options are not provided" time="0">
    </testcase>
    <testcase classname="formatAmount options does not display decimals when options are 0" name="formatAmount options does not display decimals when options are 0" time="0">
    </testcase>
    <testcase classname="formatAmount options displays min number of decimal digits" name="formatAmount options displays min number of decimal digits" time="0">
    </testcase>
    <testcase classname="formatAmount options displays max number of decimal digits" name="formatAmount options displays max number of decimal digits" time="0">
    </testcase>
  </testsuite>
  <testsuite name="NotificationsProvider" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.654" tests="2">
    <testcase classname="NotificationsProvider default number of max notifications" name="NotificationsProvider default number of max notifications" time="0.135">
    </testcase>
    <testcase classname="NotificationsProvider show custom number of max notifications" name="NotificationsProvider show custom number of max notifications" time="0.042">
    </testcase>
  </testsuite>
  <testsuite name="useBoolean" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.194" tests="1">
    <testcase classname="useBoolean sets state correctly" name="useBoolean sets state correctly" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Tooltip" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:45" time="5.253" tests="12">
    <testcase classname="Tooltip with isPointerDevice being true renders closed by default" name="Tooltip with isPointerDevice being true renders closed by default" time="0.026">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true renders initially opened" name="Tooltip with isPointerDevice being true renders initially opened" time="0.067">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true renders with portals disabled" name="Tooltip with isPointerDevice being true renders with portals disabled" time="0.023">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true opens and closes tooltip on focus" name="Tooltip with isPointerDevice being true opens and closes tooltip on focus" time="0.482">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true opens and closes tooltip on hover with a short delay" name="Tooltip with isPointerDevice being true opens and closes tooltip on hover with a short delay" time="0.814">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true opens and closes tooltip on hover with a long delay" name="Tooltip with isPointerDevice being true opens and closes tooltip on hover with a long delay" time="0.784">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true does not open tooltip with disabled listeners" name="Tooltip with isPointerDevice being true does not open tooltip with disabled listeners" time="1.012">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true does not close tooltip when interactive content is used by the user" name="Tooltip with isPointerDevice being true does not close tooltip when interactive content is used by the user" time="0.471">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true opens and moves tooltip on mouse move when followCursor prop is set and move distance is short" name="Tooltip with isPointerDevice being true opens and moves tooltip on mouse move when followCursor prop is set and move distance is short" time="0.253">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being true opens and moves tooltip on mouse move when followCursor prop is set and move distance is long" name="Tooltip with isPointerDevice being true opens and moves tooltip on mouse move when followCursor prop is set and move distance is long" time="0.495">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being false opens and closes tooltip on touch screens" name="Tooltip with isPointerDevice being false opens and closes tooltip on touch screens" time="0.263">
    </testcase>
    <testcase classname="Tooltip with isPointerDevice being false does not open tooltip on touch event when followCursor prop is set" name="Tooltip with isPointerDevice being false does not open tooltip on touch event when followCursor prop is set" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="useNotifications" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.694" tests="3">
    <testcase classname="useNotifications error notification render" name="useNotifications error notification render" time="0.091">
    </testcase>
    <testcase classname="useNotifications info notification render" name="useNotifications info notification render" time="0.029">
    </testcase>
    <testcase classname="useNotifications success notification render" name="useNotifications success notification render" time="0.031">
    </testcase>
  </testsuite>
  <testsuite name="Modal" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:49" time="0.937" tests="2">
    <testcase classname="Modal useModal opens and closes modal" name="Modal useModal opens and closes modal" time="0.402">
    </testcase>
    <testcase classname="Modal useModal shows multiple modals at the same time" name="Modal useModal shows multiple modals at the same time" time="0.021">
    </testcase>
  </testsuite>
  <testsuite name="useInterval" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.194" tests="4">
    <testcase classname="useInterval calls the callback on each tick" name="useInterval calls the callback on each tick" time="0.011">
    </testcase>
    <testcase classname="useInterval when `isPause` parameter changes its state pauses and resumes the interval" name="useInterval when `isPause` parameter changes its state pauses and resumes the interval" time="0.003">
    </testcase>
    <testcase classname="useInterval component unmounts cleans up the interval" name="useInterval component unmounts cleans up the interval" time="0.001">
    </testcase>
    <testcase classname="useInterval when initialized with `isPaused` set to true does not call the callback when isPaused is true" name="useInterval when initialized with `isPaused` set to true does not call the callback when isPaused is true" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useBodyScrollLock" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.359" tests="6">
    <testcase classname="useBodyScrollLock single usage drops scroll lock when mounted with true" name="useBodyScrollLock single usage drops scroll lock when mounted with true" time="0.008">
    </testcase>
    <testcase classname="useBodyScrollLock single usage lifts scroll lock when unmounted" name="useBodyScrollLock single usage lifts scroll lock when unmounted" time="0.001">
    </testcase>
    <testcase classname="useBodyScrollLock single usage lifts scroll lock when isLocked switches into false" name="useBodyScrollLock single usage lifts scroll lock when isLocked switches into false" time="0.002">
    </testcase>
    <testcase classname="useBodyScrollLock single usage lifts scroll lock restores prev body overflow" name="useBodyScrollLock single usage lifts scroll lock restores prev body overflow" time="0">
    </testcase>
    <testcase classname="useBodyScrollLock multiple instances usage drops scroll lock once any hook gets isLocked=true" name="useBodyScrollLock multiple instances usage drops scroll lock once any hook gets isLocked=true" time="0.012">
    </testcase>
    <testcase classname="useBodyScrollLock multiple instances usage lifts scroll lock once no hook with isLocked=true left mounted" name="useBodyScrollLock multiple instances usage lifts scroll lock once no hook with isLocked=true left mounted" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="useMouseOver" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.203" tests="2">
    <testcase classname="useMouseOver when mouse enters and leaves element should update isMouseOver state" name="useMouseOver when mouse enters and leaves element should update isMouseOver state" time="0.007">
    </testcase>
    <testcase classname="useMouseOver when unmount is triggered should remove event listeners" name="useMouseOver when unmount is triggered should remove event listeners" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="formatYAxisTick" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.191" tests="2">
    <testcase classname="formatYAxisTick formats y axis ticks" name="formatYAxisTick formats y axis ticks" time="0.001">
    </testcase>
    <testcase classname="formatYAxisTick formats y axis ticks with minutes unit" name="formatYAxisTick formats y axis ticks with minutes unit" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getXAxisTicks" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.199" tests="3">
    <testcase classname="getXAxisTicks gets x axis ticks" name="getXAxisTicks gets x axis ticks" time="0.003">
    </testcase>
    <testcase classname="getXAxisTicks gets x axis ticks for day granularity" name="getXAxisTicks gets x axis ticks for day granularity" time="0">
    </testcase>
    <testcase classname="getXAxisTicks gets x axis ticks for hour granularity" name="getXAxisTicks gets x axis ticks for hour granularity" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Name of the group" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.235" tests="1">
    <testcase classname="Name of the group convertsline config" name="Name of the group convertsline config" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getYAxisTicks" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.392" tests="3">
    <testcase classname="getYAxisTicks gets y axis ticks" name="getYAxisTicks gets y axis ticks" time="0.003">
    </testcase>
    <testcase classname="getYAxisTicks gets y axis ticks for minutes unit" name="getYAxisTicks gets y axis ticks for minutes unit" time="0.001">
    </testcase>
    <testcase classname="getYAxisTicks gets y axis ticks for minutes unit that exceeds 1 hour" name="getYAxisTicks gets y axis ticks for minutes unit that exceeds 1 hour" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="toChartFormat" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:50" time="0.317" tests="4">
    <testcase classname="toChartFormat converts chart data" name="toChartFormat converts chart data" time="0.002">
    </testcase>
    <testcase classname="toChartFormat converts chart data with custom label format" name="toChartFormat converts chart data with custom label format" time="0.004">
    </testcase>
    <testcase classname="toChartFormat converts chart data with null values" name="toChartFormat converts chart data with null values" time="0">
    </testcase>
    <testcase classname="toChartFormat convertschart data with ref data" name="toChartFormat convertschart data with ref data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getDomValue" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.215" tests="1">
    <testcase classname="getDomValue returns DOM structure from AST" name="getDomValue returns DOM structure from AST" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="toHighlightFormat" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.302" tests="2">
    <testcase classname="toHighlightFormat converts highlight data" name="toHighlightFormat converts highlight data" time="0.002">
    </testcase>
    <testcase classname="toHighlightFormat converts highlight data with label format" name="toHighlightFormat converts highlight data with label format" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="registerLexicalEvents" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.2" tests="1">
    <testcase classname="registerLexicalEvents registers listeners and commands correctly and return a cleanup function" name="registerLexicalEvents registers listeners and commands correctly and return a cleanup function" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="replaceHeadingNodes" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.223" tests="2">
    <testcase classname="replaceHeadingNodes when h3 heading is provided does not replace headings" name="replaceHeadingNodes when h3 heading is provided does not replace headings" time="0.002">
    </testcase>
    <testcase classname="replaceHeadingNodes when non-h3 heading is provided replaces it with bold text" name="replaceHeadingNodes when non-h3 heading is provided replaces it with bold text" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="html-to-hast" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.251" tests="4">
    <testcase classname="html-to-hast valid HTML string returns valid Picasso components" name="html-to-hast valid HTML string returns valid Picasso components" time="0.005">
    </testcase>
    <testcase classname="html-to-hast valid HTML string strips script tags" name="html-to-hast valid HTML string strips script tags" time="0.002">
    </testcase>
    <testcase classname="html-to-hast when parsing HTML with a single container returns an single starting node AST for a single paragraph" name="html-to-hast when parsing HTML with a single container returns an single starting node AST for a single paragraph" time="0.001">
    </testcase>
    <testcase classname="html-to-hast when parsing HTML with a single container returns an single starting node AST for lists" name="html-to-hast when parsing HTML with a single container returns an single starting node AST for lists" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="findTopDomain" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.261" tests="2">
    <testcase classname="findTopDomain when no stacked bars are present finds top domain" name="findTopDomain when no stacked bars are present finds top domain" time="0.001">
    </testcase>
    <testcase classname="findTopDomain when stacked bars are present finds top domain accounting for stacked values" name="findTopDomain when stacked bars are present finds top domain accounting for stacked values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="findTopDomain" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.288" tests="1">
    <testcase classname="findTopDomain finds top domain" name="findTopDomain finds top domain" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="add-import" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.345" tests="4">
    <testcase classname="add-import when used to add an import adds member correctly to the last import of that package" name="add-import when used to add an import adds member correctly to the last import of that package" time="0.011">
    </testcase>
    <testcase classname="find-specifier-for-import when searching for a specifier returns the last known specifier for that package member" name="find-specifier-for-import when searching for a specifier returns the last known specifier for that package member" time="0.002">
    </testcase>
    <testcase classname="is-import-for when testing against imports returns true if ImportDeclaration is for a specific package" name="is-import-for when testing against imports returns true if ImportDeclaration is for a specific package" time="0.001">
    </testcase>
    <testcase classname="is-specifier-for when testing for a specific specifier returns the as true when the specifier matches" name="is-specifier-for when testing for a specific specifier returns the as true when the specifier matches" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="container-borders" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.244" tests="1">
    <testcase classname="container-borders transforms correctly" name="container-borders transforms correctly" time="0.056">
    </testcase>
  </testsuite>
  <testsuite name="prompt-modal-variants" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="0.245" tests="1">
    <testcase classname="prompt-modal-variants transforms correctly" name="prompt-modal-variants transforms correctly" time="0.08">
    </testcase>
  </testsuite>
  <testsuite name="tag-rectangular-variants" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.299" tests="1">
    <testcase classname="tag-rectangular-variants transforms correctly" name="tag-rectangular-variants transforms correctly" time="0.069">
    </testcase>
  </testsuite>
  <testsuite name="rich-text-editor-replacement" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.345" tests="1">
    <testcase classname="rich-text-editor-replacement transforms correctly using &quot;imports&quot; data" name="rich-text-editor-replacement transforms correctly using &quot;imports&quot; data" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="useAvatarStates" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.285" tests="9">
    <testcase classname="useAvatarStates returns hovered state as true" name="useAvatarStates returns hovered state as true" time="0.007">
    </testcase>
    <testcase classname="useAvatarStates when auto-focus is true returns isFocused state as true" name="useAvatarStates when auto-focus is true returns isFocused state as true" time="0.001">
    </testcase>
    <testcase classname="useAvatarStates when auto-focus is false returns isFocused state as false" name="useAvatarStates when auto-focus is false returns isFocused state as false" time="0.01">
    </testcase>
    <testcase classname="useAvatarStates when auto-focus is false when dropzone is focused returns isFocused state as true" name="useAvatarStates when auto-focus is false when dropzone is focused returns isFocused state as true" time="0.001">
    </testcase>
    <testcase classname="useAvatarStates when default active is true returns isDragActive state as true" name="useAvatarStates when default active is true returns isDragActive state as true" time="0.001">
    </testcase>
    <testcase classname="useAvatarStates when default active is false returns isDragActive state as false" name="useAvatarStates when default active is false returns isDragActive state as false" time="0.001">
    </testcase>
    <testcase classname="useAvatarStates when default active is false when dropzone is active returns isDragActive state as true" name="useAvatarStates when default active is false when dropzone is active returns isDragActive state as true" time="0">
    </testcase>
    <testcase classname="useAvatarStates returns hovered state as true after onMouseEnter call" name="useAvatarStates returns hovered state as true after onMouseEnter call" time="0.001">
    </testcase>
    <testcase classname="useAvatarStates returns hovered state as false after onMouseLeave call" name="useAvatarStates returns hovered state as false after onMouseLeave call" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="gradientWidth" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.275" tests="1">
    <testcase classname="gradientWidth returns the expected gradient width" name="gradientWidth returns the expected gradient width" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isOnLastPage" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.244" tests="1">
    <testcase classname="isOnLastPage returns expected results" name="isOnLastPage returns expected results" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="synchronizeToolbarState" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:51" time="1.533" tests="5">
    <testcase classname="synchronizeToolbarState when range selection has bold and italic format dispatches an action with the correct values" name="synchronizeToolbarState when range selection has bold and italic format dispatches an action with the correct values" time="0.002">
    </testcase>
    <testcase classname="synchronizeToolbarState when selection is not a range selection does not dispatch any action" name="synchronizeToolbarState when selection is not a range selection does not dispatch any action" time="0.001">
    </testcase>
    <testcase classname="synchronizeToolbarState when range selection has a list node dispatches an action with the ordered list" name="synchronizeToolbarState when range selection has a list node dispatches an action with the ordered list" time="0.001">
    </testcase>
    <testcase classname="synchronizeToolbarState when range selection has a list node dispatches an action with the bullet list" name="synchronizeToolbarState when range selection has a list node dispatches an action with the bullet list" time="0">
    </testcase>
    <testcase classname="synchronizeToolbarState when range selection is heading dispatches an action with the correct values" name="synchronizeToolbarState when range selection is heading dispatches an action with the correct values" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useAvatarUpload" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.372" tests="4">
    <testcase classname="useAvatarUpload when src exist and uploading false returns showAvatar as true" name="useAvatarUpload when src exist and uploading false returns showAvatar as true" time="0.006">
    </testcase>
    <testcase classname="useAvatarUpload when src exist and uploading true returns showAvatar as false" name="useAvatarUpload when src exist and uploading true returns showAvatar as false" time="0">
    </testcase>
    <testcase classname="useAvatarUpload when src does not exist and uploading false returns showUploadIcon as true" name="useAvatarUpload when src does not exist and uploading false returns showUploadIcon as true" time="0">
    </testcase>
    <testcase classname="useAvatarUpload when src does not exist and uploading true returns showUploadIcon as false" name="useAvatarUpload when src does not exist and uploading true returns showUploadIcon as false" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useDrilldownMenu" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.253" tests="3">
    <testcase classname="useDrilldownMenu renders initially" name="useDrilldownMenu renders initially" time="0.007">
    </testcase>
    <testcase classname="useDrilldownMenu navigates between items" name="useDrilldownMenu navigates between items" time="0.002">
    </testcase>
    <testcase classname="useDrilldownMenu closes submenu on away click" name="useDrilldownMenu closes submenu on away click" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useMenu" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.273" tests="2">
    <testcase classname="useMenu uses slide if variant is slide" name="useMenu uses slide if variant is slide" time="0.036">
    </testcase>
    <testcase classname="useMenu uses drilldown if variant is drilldown" name="useMenu uses drilldown if variant is drilldown" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useSlideMenu" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.253" tests="4">
    <testcase classname="useSlideMenu renders initially" name="useSlideMenu renders initially" time="0.007">
    </testcase>
    <testcase classname="useSlideMenu navigates back and forth" name="useSlideMenu navigates back and forth" time="0.002">
    </testcase>
    <testcase classname="useSlideMenu updates inner menu when it changes" name="useSlideMenu updates inner menu when it changes" time="0.001">
    </testcase>
    <testcase classname="useSlideMenu delegates to parent context if available" name="useSlideMenu delegates to parent context if available" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useMenuVariant" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.287" tests="2">
    <testcase classname="useMenuVariant uses variant from props if there is no context" name="useMenuVariant uses variant from props if there is no context" time="0.006">
    </testcase>
    <testcase classname="useMenuVariant uses variant from context if it is provided" name="useMenuVariant uses variant from context if it is provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useMenuItem" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:52" time="0.274" tests="1">
    <testcase classname="useMenuItem combines hooks for different menu variants" name="useMenuItem combines hooks for different menu variants" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="useDrilldownMenuItem" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.268" tests="3">
    <testcase classname="useDrilldownMenuItem is opened when active" name="useDrilldownMenuItem is opened when active" time="0.009">
    </testcase>
    <testcase classname="useDrilldownMenuItem is not opened when not active" name="useDrilldownMenuItem is not opened when not active" time="0">
    </testcase>
    <testcase classname="useDrilldownMenuItem delegates events to context" name="useDrilldownMenuItem delegates events to context" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useSlideMenuItem" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.37" tests="2">
    <testcase classname="useSlideMenuItem updates menu when renders" name="useSlideMenuItem updates menu when renders" time="0.015">
    </testcase>
    <testcase classname="useSlideMenuItem delegates events to context" name="useSlideMenuItem delegates events to context" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useMenuItemKey" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.365" tests="1">
    <testcase classname="useMenuItemKey generates stable key" name="useMenuItemKey generates stable key" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="getRange" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.428" tests="1">
    <testcase classname="getRange works correctly" name="getRange works correctly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="getSiblings" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.457" tests="2">
    <testcase classname="getSiblings gets first-level siblings" name="getSiblings gets first-level siblings" time="0.002">
    </testcase>
    <testcase classname="getSiblings gets second-level siblings" name="getSiblings gets second-level siblings" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="hasEllipses" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.419" tests="4">
    <testcase classname="hasEllipses has only ellipses on right side when we are on first page" name="hasEllipses has only ellipses on right side when we are on first page" time="0.002">
    </testcase>
    <testcase classname="hasEllipses has only ellipses on both sides when we are in middle" name="hasEllipses has only ellipses on both sides when we are in middle" time="0">
    </testcase>
    <testcase classname="hasEllipses has NO ellipses when we have only one sibling" name="hasEllipses has NO ellipses when we have only one sibling" time="0">
    </testcase>
    <testcase classname="hasEllipses has NO ellipses when ellipses would appear between two consecutive numbers" name="hasEllipses has NO ellipses when ellipses would appear between two consecutive numbers" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="useHighlightedIndex" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.442" tests="5">
    <testcase classname="useHighlightedIndex sets a highlighted index" name="useHighlightedIndex sets a highlighted index" time="0.019">
    </testcase>
    <testcase classname="useHighlightedIndex sets highlighted index when closed" name="useHighlightedIndex sets highlighted index when closed" time="0.002">
    </testcase>
    <testcase classname="useHighlightedIndex resets highlighted index when closed and multiple values" name="useHighlightedIndex resets highlighted index when closed and multiple values" time="0.001">
    </testcase>
    <testcase classname="useHighlightedIndex doesn&apos;t set highlighted index for a disabled option" name="useHighlightedIndex doesn&apos;t set highlighted index for a disabled option" time="0.001">
    </testcase>
    <testcase classname="useHighlightedIndex doesn&apos;t set highlighted index for a selected and disabled option" name="useHighlightedIndex doesn&apos;t set highlighted index for a selected and disabled option" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="countOptions" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.368" tests="1">
    <testcase classname="countOptions counts options" name="countOptions counts options" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="fireOnChangeEvent" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:54" time="0.477" tests="2">
    <testcase classname="fireOnChangeEvent fires without onChange" name="fireOnChangeEvent fires without onChange" time="0.002">
    </testcase>
    <testcase classname="fireOnChangeEvent fires with onChange" name="fireOnChangeEvent fires with onChange" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useAdornments" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="0.878" tests="5">
    <testcase classname="useAdornments returns loading adornment" name="useAdornments returns loading adornment" time="0.048">
    </testcase>
    <testcase classname="useAdornments returns no adornment" name="useAdornments returns no adornment" time="0.002">
    </testcase>
    <testcase classname="useAdornments returns start adornment" name="useAdornments returns start adornment" time="0.001">
    </testcase>
    <testcase classname="useAdornments returns end adornment" name="useAdornments returns end adornment" time="0.001">
    </testcase>
    <testcase classname="useAdornments returns start adornment when loading" name="useAdornments returns start adornment when loading" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="flattenOptions" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:54" time="0.408" tests="1">
    <testcase classname="flattenOptions returns a flat list of options" name="flattenOptions returns a flat list of options" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="focusRef" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:54" time="0.368" tests="1">
    <testcase classname="focusRef focuses correctly" name="focusRef focuses correctly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSelectedOptions" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:55" time="0.274" tests="2">
    <testcase classname="getSelectedOptions gets correctly" name="getSelectedOptions gets correctly" time="0.015">
    </testcase>
    <testcase classname="getSelectedOptions works with numbers" name="getSelectedOptions works with numbers" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="filterOptions" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:54" time="1.437" tests="1">
    <testcase classname="filterOptions filters options correctly" name="filterOptions filters options correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getNextWrappingIndex" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:55" time="0.253" tests="1">
    <testcase classname="getNextWrappingIndex gets correctly" name="getNextWrappingIndex gets correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useSelectState" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:53" time="2.243" tests="9">
    <testcase classname="useSelectState when multiple selection is off when no selected options returns initial state" name="useSelectState when multiple selection is off when no selected options returns initial state" time="0.053">
    </testcase>
    <testcase classname="useSelectState when multiple selection is off when no selected options when value is changed on re-render updates display value and selected options automatically" name="useSelectState when multiple selection is off when no selected options when value is changed on re-render updates display value and selected options automatically" time="0.003">
    </testcase>
    <testcase classname="useSelectState when multiple selection is off when selected value is specified returns state with value" name="useSelectState when multiple selection is off when selected value is specified returns state with value" time="0.001">
    </testcase>
    <testcase classname="useSelectState when multiple selection is used when selected value is specified returns multiple state with value" name="useSelectState when multiple selection is used when selected value is specified returns multiple state with value" time="0.001">
    </testcase>
    <testcase classname="useSelectState when there is more items than threshold allows shows search" name="useSelectState when there is more items than threshold allows shows search" time="0.001">
    </testcase>
    <testcase classname="useSelectState when threshold is higher than max number of elements to show forces search" name="useSelectState when threshold is higher than max number of elements to show forces search" time="0">
    </testcase>
    <testcase classname="useSelectState when filter options callback was called filters options correctly" name="useSelectState when filter options callback was called filters options correctly" time="0.002">
    </testcase>
    <testcase classname="useSelectState toggles isOpen state" name="useSelectState toggles isOpen state" time="0.001">
    </testcase>
    <testcase classname="useSelectState when select is opened but has became disabled switches to closed state to false" name="useSelectState when select is opened but has became disabled switches to closed state to false" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="isEmpty" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:55" time="0.403" tests="1">
    <testcase classname="isEmpty checks correctly" name="isEmpty checks correctly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="isOptionInSelectedValues" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:55" time="0.277" tests="1">
    <testcase classname="isOptionInSelectedValues checks correctly" name="isOptionInSelectedValues checks correctly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSingleSelection" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:55" time="0.296" tests="2">
    <testcase classname="getSingleSelection gets empty" name="getSingleSelection gets empty" time="0.001">
    </testcase>
    <testcase classname="getSingleSelection gets non-empty" name="getSingleSelection gets non-empty" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getOptionText" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:55" time="0.802" tests="2">
    <testcase classname="getOptionText gets from an option" name="getOptionText gets from an option" time="0.001">
    </testcase>
    <testcase classname="getOptionText gets from null" name="getOptionText gets from null" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getMultipleSelection" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.296" tests="2">
    <testcase classname="getMultipleSelection gets empty" name="getMultipleSelection gets empty" time="0.002">
    </testcase>
    <testcase classname="getMultipleSelection gets non-empty" name="getMultipleSelection gets non-empty" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="limitOptions" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.219" tests="1">
    <testcase classname="limitOptions limits options correctly" name="limitOptions limits options correctly" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="isRelatedTargetInsidePopper" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.264" tests="1">
    <testcase classname="isRelatedTargetInsidePopper checks correctly`" name="isRelatedTargetInsidePopper checks correctly`" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="toggleMultipleSelectValue" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.24" tests="1">
    <testcase classname="toggleMultipleSelectValue toggles correctly" name="toggleMultipleSelectValue toggles correctly" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="normalizeArrowKey" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.263" tests="1">
    <testcase classname="normalizeArrowKey normalizes correctly" name="normalizeArrowKey normalizes correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="getBadgeProps" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.198" tests="7">
    <testcase classname="getBadgeProps when number value is passed returns object with the value in content property" name="getBadgeProps when number value is passed returns object with the value in content property" time="0.002">
    </testcase>
    <testcase classname="getBadgeProps when number value is passed returns object with the value in content property" name="getBadgeProps when number value is passed returns object with the value in content property" time="0">
    </testcase>
    <testcase classname="getBadgeProps when number value is passed returns object with the value in content property" name="getBadgeProps when number value is passed returns object with the value in content property" time="0">
    </testcase>
    <testcase classname="getBadgeProps when number value is passed returns object with the value in content property" name="getBadgeProps when number value is passed returns object with the value in content property" time="0">
    </testcase>
    <testcase classname="getBadgeProps when falsy input is passed returns the same value" name="getBadgeProps when falsy input is passed returns the same value" time="0">
    </testcase>
    <testcase classname="getBadgeProps when badge props object is passed returns the same object" name="getBadgeProps when badge props object is passed returns the same object" time="0">
    </testcase>
    <testcase classname="getBadgeProps when badge props object is passed returns the same object" name="getBadgeProps when badge props object is passed returns the same object" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getTagProps" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.2" tests="4">
    <testcase classname="getTagProps when string value is passed returns object with the value in content property" name="getTagProps when string value is passed returns object with the value in content property" time="0.002">
    </testcase>
    <testcase classname="getTagProps when falsy input is passed returns the same value" name="getTagProps when falsy input is passed returns the same value" time="0.001">
    </testcase>
    <testcase classname="getTagProps when tag props object is passed returns the same object" name="getTagProps when tag props object is passed returns the same object" time="0">
    </testcase>
    <testcase classname="getTagProps when tag props object is passed returns the same object" name="getTagProps when tag props object is passed returns the same object" time="0">
    </testcase>
  </testsuite>
  <testsuite name="isOptionsType" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.184" tests="1">
    <testcase classname="isOptionsType checks correctly" name="isOptionsType checks correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="toMuiVariant" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.212" tests="1">
    <testcase classname="toMuiVariant maps variants correctly" name="toMuiVariant maps variants correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Rotate180" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.45" tests="2">
    <testcase classname="Rotate180 render without transformation" name="Rotate180 render without transformation" time="0.023">
    </testcase>
    <testcase classname="Rotate180 render with transformation" name="Rotate180 render with transformation" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="getColor" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.589" tests="14">
    <testcase classname="getColor returns correct color for team under status of claimed" name="getColor returns correct color for team under status of claimed" time="0.001">
    </testcase>
    <testcase classname="getColor returns correct color for team under status of bad_leads" name="getColor returns correct color for team under status of bad_leads" time="0.001">
    </testcase>
    <testcase classname="getColor returns correct color for team under status of paused" name="getColor returns correct color for team under status of paused" time="0">
    </testcase>
    <testcase classname="getColor returns correct color for team under status of removed" name="getColor returns correct color for team under status of removed" time="0">
    </testcase>
    <testcase classname="getColor returns correct color for team under status of collections" name="getColor returns correct color for team under status of collections" time="0.001">
    </testcase>
    <testcase classname="getColor returns correct color for team under status of pending" name="getColor returns correct color for team under status of pending" time="0">
    </testcase>
    <testcase classname="getColor returns correct color for user under status of claimed" name="getColor returns correct color for user under status of claimed" time="0">
    </testcase>
    <testcase classname="getColor returns correct color for user under status of bad_leads" name="getColor returns correct color for user under status of bad_leads" time="0">
    </testcase>
    <testcase classname="getColor returns correct color for user under status of paused" name="getColor returns correct color for user under status of paused" time="0">
    </testcase>
    <testcase classname="getColor returns correct color for user under status of removed" name="getColor returns correct color for user under status of removed" time="0">
    </testcase>
    <testcase classname="getColor returns correct color for user under status of collections" name="getColor returns correct color for user under status of collections" time="0">
    </testcase>
    <testcase classname="getColor returns correct color for user under status of pending" name="getColor returns correct color for user under status of pending" time="0">
    </testcase>
    <testcase classname="getColor renders bad result color when user value is lower than team value" name="getColor renders bad result color when user value is lower than team value" time="0">
    </testcase>
    <testcase classname="getColor renders normal color when user value is lower than team value and status is claimed" name="getColor renders normal color when user value is lower than team value and status is claimed" time="0">
    </testcase>
  </testsuite>
  <testsuite name="formatData" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.642" tests="1">
    <testcase classname="formatData formats categories chart data" name="formatData formats categories chart data" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getDisplayTexts" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:56" time="0.633" tests="1">
    <testcase classname="getDisplayTexts returns correct data" name="getDisplayTexts returns correct data" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useTypographyClasses" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:57" time="0.204" tests="2">
    <testcase classname="useTypographyClasses when useTypographyClasses is called calls getTypographyClassName with the correct parameters" name="useTypographyClasses when useTypographyClasses is called calls getTypographyClassName with the correct parameters" time="0.006">
    </testcase>
    <testcase classname="useTypographyClasses when useTypographyClasses is called returns the value from getTypographyClassName" name="useTypographyClasses when useTypographyClasses is called returns the value from getTypographyClassName" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useOnFocus" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:57" time="0.611" tests="3">
    <testcase classname="useOnFocus sets `isFocused` to true when handleFocus is called" name="useOnFocus sets `isFocused` to true when handleFocus is called" time="0.012">
    </testcase>
    <testcase classname="useOnFocus when internalRefs is passed when handleBlur is called and the focus is not on an internal element sets `isFocused` to false" name="useOnFocus when internalRefs is passed when handleBlur is called and the focus is not on an internal element sets `isFocused` to false" time="0.001">
    </testcase>
    <testcase classname="useOnFocus when internalRefs is passed when handleBlur is called and the focus is on an internal element does not set `isFocused` to false" name="useOnFocus when internalRefs is passed when handleBlur is called and the focus is on an internal element does not set `isFocused` to false" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useRichText" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:57" time="0.702" tests="13">
    <testcase classname="useRichText not allowed tags returns the unmapped tag" name="useRichText not allowed tags returns the unmapped tag" time="0.006">
    </testcase>
    <testcase classname="useRichText allowed tags maps p with proper Picasso component" name="useRichText allowed tags maps p with proper Picasso component" time="0.001">
    </testcase>
    <testcase classname="useRichText allowed tags maps h3 with proper Picasso component" name="useRichText allowed tags maps h3 with proper Picasso component" time="0.001">
    </testcase>
    <testcase classname="useRichText allowed tags maps strong with proper Picasso component" name="useRichText allowed tags maps strong with proper Picasso component" time="0.001">
    </testcase>
    <testcase classname="useRichText allowed tags maps em with proper Picasso component" name="useRichText allowed tags maps em with proper Picasso component" time="0.001">
    </testcase>
    <testcase classname="useRichText allowed tags maps ul with proper Picasso component" name="useRichText allowed tags maps ul with proper Picasso component" time="0">
    </testcase>
    <testcase classname="useRichText allowed tags maps ol with proper Picasso component" name="useRichText allowed tags maps ol with proper Picasso component" time="0">
    </testcase>
    <testcase classname="useRichText allowed tags maps li with proper Picasso component" name="useRichText allowed tags maps li with proper Picasso component" time="0">
    </testcase>
    <testcase classname="useRichText handles mulltiple children" name="useRichText handles mulltiple children" time="0.001">
    </testcase>
    <testcase classname="useRichText handles children recursively" name="useRichText handles children recursively" time="0">
    </testcase>
    <testcase classname="useRichText when children are empty returns null" name="useRichText when children are empty returns null" time="0.001">
    </testcase>
    <testcase classname="useRichText when children of child are empty returns correct node" name="useRichText when children of child are empty returns correct node" time="0.001">
    </testcase>
    <testcase classname="useRichText when children are undefined returns null" name="useRichText when children are undefined returns null" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useOnFocus" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:57" time="0.68" tests="7">
    <testcase classname="useOnFocus handleFocus does nothing when editor or toolbar are not rendered" name="useOnFocus handleFocus does nothing when editor or toolbar are not rendered" time="0.006">
    </testcase>
    <testcase classname="useOnFocus handleFocus enables toolbar when clicked inside toolbar" name="useOnFocus handleFocus enables toolbar when clicked inside toolbar" time="0.001">
    </testcase>
    <testcase classname="useOnFocus handleFocus enables toolbar and calls onFocus when clicked inside editor" name="useOnFocus handleFocus enables toolbar and calls onFocus when clicked inside editor" time="0.001">
    </testcase>
    <testcase classname="useOnFocus handleBlur does nothing when editor or toolbar are not rendered" name="useOnFocus handleBlur does nothing when editor or toolbar are not rendered" time="0.001">
    </testcase>
    <testcase classname="useOnFocus handleBlur does nothing when focusElement is in toolbar" name="useOnFocus handleBlur does nothing when focusElement is in toolbar" time="0.001">
    </testcase>
    <testcase classname="useOnFocus handleBlur does nothing when focusElement is in editor" name="useOnFocus handleBlur does nothing when focusElement is in editor" time="0.001">
    </testcase>
    <testcase classname="useOnFocus handleBlur disables toolbar and calls onBlur when clicked outside the editor or toolbar" name="useOnFocus handleBlur disables toolbar and calls onBlur when clicked outside the editor or toolbar" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useTextEditorState" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:58" time="0.456" tests="6">
    <testcase classname="useTextEditorState returns initial state" name="useTextEditorState returns initial state" time="0.006">
    </testcase>
    <testcase classname="useTextEditorState toolbar format updates bold" name="useTextEditorState toolbar format updates bold" time="0.002">
    </testcase>
    <testcase classname="useTextEditorState toolbar format updates italic" name="useTextEditorState toolbar format updates italic" time="0.002">
    </testcase>
    <testcase classname="useTextEditorState toolbar format updates header" name="useTextEditorState toolbar format updates header" time="0.001">
    </testcase>
    <testcase classname="useTextEditorState toolbar format updates list" name="useTextEditorState toolbar format updates list" time="0.001">
    </testcase>
    <testcase classname="useTextEditorState toolbar updates disabled" name="useTextEditorState toolbar updates disabled" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useCounter" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:57" time="1.287" tests="6">
    <testcase classname="useCounter returns empty message when minLength and maxLength are undefined" name="useCounter returns empty message when minLength and maxLength are undefined" time="0.008">
    </testcase>
    <testcase classname="useCounter returns default message when only minLength is provided" name="useCounter returns default message when only minLength is provided" time="0.001">
    </testcase>
    <testcase classname="useCounter returns default message when only maxLength is provided" name="useCounter returns default message when only maxLength is provided" time="0.001">
    </testcase>
    <testcase classname="useCounter returns custom minLength message when minLengthMessage is provided" name="useCounter returns custom minLength message when minLengthMessage is provided" time="0">
    </testcase>
    <testcase classname="useCounter returns custom maxLength message when maxLengthMessage is provided" name="useCounter returns custom maxLength message when maxLengthMessage is provided" time="0.001">
    </testcase>
    <testcase classname="useCounter returns respective message when both minLength and maxLength are provided" name="useCounter returns respective message when both minLength and maxLength are provided" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useOnSelectionChange" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:57" time="1.641" tests="1">
    <testcase classname="useOnSelectionChange calls dispatch with correct actions" name="useOnSelectionChange calls dispatch with correct actions" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="useDefaultValue" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:58" time="0.211" tests="2">
    <testcase classname="useDefaultValue does nothing without defaultValue" name="useDefaultValue does nothing without defaultValue" time="0.007">
    </testcase>
    <testcase classname="useDefaultValue sets to correct contents" name="useDefaultValue sets to correct contents" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useFocus" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.157" tests="2">
    <testcase classname="useFocus when isFocused is off does not focus quill" name="useFocus when isFocused is off does not focus quill" time="0.014">
    </testcase>
    <testcase classname="useFocus when isFocused is on does focus editor" name="useFocus when isFocused is on does focus editor" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useDisabledEditor" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.188" tests="3">
    <testcase classname="useDisabledEditor when disabled is false does not disable the editor" name="useDisabledEditor when disabled is false does not disable the editor" time="0.006">
    </testcase>
    <testcase classname="useDisabledEditor when disabled is true does disable the editor" name="useDisabledEditor when disabled is true does disable the editor" time="0.001">
    </testcase>
    <testcase classname="useDisabledEditor when disabled is true and has a default value does disable the editor" name="useDisabledEditor when disabled is true and has a default value does disable the editor" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="useToolbarHandlers" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:58" time="0.96" tests="5">
    <testcase classname="useToolbarHandlers calls handleTextFormat with proper arguments checks handleBold" name="useToolbarHandlers calls handleTextFormat with proper arguments checks handleBold" time="0.008">
    </testcase>
    <testcase classname="useToolbarHandlers calls handleTextFormat with proper arguments checks handleItalic" name="useToolbarHandlers calls handleTextFormat with proper arguments checks handleItalic" time="0.006">
    </testcase>
    <testcase classname="useToolbarHandlers calls handleTextFormat with proper arguments checks handleHeader" name="useToolbarHandlers calls handleTextFormat with proper arguments checks handleHeader" time="0.001">
    </testcase>
    <testcase classname="useToolbarHandlers calls handleTextFormat with proper arguments checks handleUnordered" name="useToolbarHandlers calls handleTextFormat with proper arguments checks handleUnordered" time="0.002">
    </testcase>
    <testcase classname="useToolbarHandlers calls handleTextFormat with proper arguments checks handleOrdered" name="useToolbarHandlers calls handleTextFormat with proper arguments checks handleOrdered" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useSubscribeToQuillEvents" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.198" tests="1">
    <testcase classname="useSubscribeToQuillEvents subscribes to events correctly" name="useSubscribeToQuillEvents subscribes to events correctly" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="useOnTextFormat" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:58" time="0.926" tests="4">
    <testcase classname="useOnTextFormat handles bold action" name="useOnTextFormat handles bold action" time="0.008">
    </testcase>
    <testcase classname="useOnTextFormat handles italic action" name="useOnTextFormat handles italic action" time="0.001">
    </testcase>
    <testcase classname="useOnTextFormat handles list action" name="useOnTextFormat handles list action" time="0.001">
    </testcase>
    <testcase classname="useOnTextFormat handles header action" name="useOnTextFormat handles header action" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getCleanupOnAllContentRemovalHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.426" tests="4">
    <testcase classname="getCleanupOnAllContentRemovalHandler does nothing when not delete operation" name="getCleanupOnAllContentRemovalHandler does nothing when not delete operation" time="0.001">
    </testcase>
    <testcase classname="getCleanupOnAllContentRemovalHandler does nothing when all text is not removed" name="getCleanupOnAllContentRemovalHandler does nothing when all text is not removed" time="0">
    </testcase>
    <testcase classname="getCleanupOnAllContentRemovalHandler does nothing when no format is applied after removal" name="getCleanupOnAllContentRemovalHandler does nothing when no format is applied after removal" time="0.001">
    </testcase>
    <testcase classname="getCleanupOnAllContentRemovalHandler cleans up the content" name="getCleanupOnAllContentRemovalHandler cleans up the content" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getEditorChangeHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.377" tests="4">
    <testcase classname="getEditorChangeHandler text-change event when source is silent does nothing" name="getEditorChangeHandler text-change event when source is silent does nothing" time="0.001">
    </testcase>
    <testcase classname="getEditorChangeHandler text-change event when source is api calls the callback with quill format" name="getEditorChangeHandler text-change event when source is api calls the callback with quill format" time="0.001">
    </testcase>
    <testcase classname="getEditorChangeHandler text-change event when source is user when quill removes header format calls the callback with quill format" name="getEditorChangeHandler text-change event when source is user when quill removes header format calls the callback with quill format" time="0.001">
    </testcase>
    <testcase classname="getEditorChangeHandler text-change event when source is user when it is usual text change does nothing" name="getEditorChangeHandler text-change event when source is user when it is usual text change does nothing" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getTextLengthChangeHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.409" tests="1">
    <testcase classname="getTextLengthChangeHandler simply calls onTextLengthChange" name="getTextLengthChangeHandler simply calls onTextLengthChange" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="getSelectionChangeHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.342" tests="4">
    <testcase classname="getSelectionChangeHandler does nothing when silent event" name="getSelectionChangeHandler does nothing when silent event" time="0.001">
    </testcase>
    <testcase classname="getSelectionChangeHandler does nothing when api event" name="getSelectionChangeHandler does nothing when api event" time="0.001">
    </testcase>
    <testcase classname="getSelectionChangeHandler calls onSelectionChange with proper format when selection has been changed" name="getSelectionChangeHandler calls onSelectionChange with proper format when selection has been changed" time="0.001">
    </testcase>
    <testcase classname="getSelectionChangeHandler does not call onSelectionChange when clicking outside of editor" name="getSelectionChangeHandler does not call onSelectionChange when clicking outside of editor" time="0">
    </testcase>
  </testsuite>
  <testsuite name="quillDecodeIndent" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.155" tests="7">
    <testcase classname="quillDecodeIndent when input is null or empty should return an empty string" name="quillDecodeIndent when input is null or empty should return an empty string" time="0.001">
    </testcase>
    <testcase classname="quillDecodeIndent should correctly process unordered lists" name="quillDecodeIndent should correctly process unordered lists" time="0.002">
    </testcase>
    <testcase classname="quillDecodeIndent should correctly process ordered lists" name="quillDecodeIndent should correctly process ordered lists" time="0.001">
    </testcase>
    <testcase classname="quillDecodeIndent should correctly process non-list elements" name="quillDecodeIndent should correctly process non-list elements" time="0.002">
    </testcase>
    <testcase classname="quillDecodeIndent should correctly process multiple nested lists" name="quillDecodeIndent should correctly process multiple nested lists" time="0.001">
    </testcase>
    <testcase classname="quillDecodeIndent when removing first level parent should not break" name="quillDecodeIndent when removing first level parent should not break" time="0">
    </testcase>
    <testcase classname="quillDecodeIndent when removing parent level should not break" name="quillDecodeIndent when removing parent level should not break" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="removeClasses" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.165" tests="3">
    <testcase classname="removeClasses does nothing when no classes" name="removeClasses does nothing when no classes" time="0.001">
    </testcase>
    <testcase classname="removeClasses removes classes from html" name="removeClasses removes classes from html" time="0">
    </testcase>
    <testcase classname="removeClasses removes classes from html with nesting" name="removeClasses removes classes from html with nesting" time="0">
    </testcase>
  </testsuite>
  <testsuite name="getTextChangeHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.375" tests="3">
    <testcase classname="getTextChangeHandler does nothing when silent event" name="getTextChangeHandler does nothing when silent event" time="0.002">
    </testcase>
    <testcase classname="getTextChangeHandler returns cleaned html" name="getTextChangeHandler returns cleaned html" time="0.002">
    </testcase>
    <testcase classname="getTextChangeHandler when content is removed returns empty string" name="getTextChangeHandler when content is removed returns empty string" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="removeCursorSpan" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:43:59" time="0.148" tests="4">
    <testcase classname="removeCursorSpan has nothing to replace" name="removeCursorSpan has nothing to replace" time="0.002">
    </testcase>
    <testcase classname="removeCursorSpan replaces span wrapped in strong" name="removeCursorSpan replaces span wrapped in strong" time="0">
    </testcase>
    <testcase classname="removeCursorSpan replaces span wrapped in em" name="removeCursorSpan replaces span wrapped in em" time="0">
    </testcase>
    <testcase classname="removeCursorSpan replaces span wrapped in strong and em" name="removeCursorSpan replaces span wrapped in strong and em" time="0">
    </testcase>
  </testsuite>
  <testsuite name="typography-sizes" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.205" tests="1">
    <testcase classname="typography-sizes transforms correctly using &quot;basic&quot; data" name="typography-sizes transforms correctly using &quot;basic&quot; data" time="0.065">
    </testcase>
  </testsuite>
  <testsuite name="overlay-badge" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.189" tests="2">
    <testcase classname="overlay-badge transforms correctly using &quot;basic&quot; data" name="overlay-badge transforms correctly using &quot;basic&quot; data" time="0.053">
    </testcase>
    <testcase classname="overlay-badge transforms correctly using &quot;size-default&quot; data" name="overlay-badge transforms correctly using &quot;size-default&quot; data" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="picasso-lab" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.25" tests="1">
    <testcase classname="picasso-lab transforms correctly using &quot;basic&quot; data" name="picasso-lab transforms correctly using &quot;basic&quot; data" time="0.088">
    </testcase>
  </testsuite>
  <testsuite name="rename-rating-stars" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.24" tests="2">
    <testcase classname="rename-rating-stars transforms correctly using &quot;basic&quot; data" name="rename-rating-stars transforms correctly using &quot;basic&quot; data" time="0.084">
    </testcase>
    <testcase classname="rename-rating-stars transforms correctly using &quot;forms&quot; data" name="rename-rating-stars transforms correctly using &quot;forms&quot; data" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="remove-tooltip-variant" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.256" tests="2">
    <testcase classname="remove-tooltip-variant transforms correctly using &quot;basic&quot; data" name="remove-tooltip-variant transforms correctly using &quot;basic&quot; data" time="0.06">
    </testcase>
    <testcase classname="remove-tooltip-variant transforms correctly using &quot;children-with-variant&quot; data" name="remove-tooltip-variant transforms correctly using &quot;children-with-variant&quot; data" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="page-sidebar" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.311" tests="3">
    <testcase classname="page-sidebar transforms correctly using &quot;basic&quot; data" name="page-sidebar transforms correctly using &quot;basic&quot; data" time="0.099">
    </testcase>
    <testcase classname="page-sidebar transforms correctly using &quot;with-import&quot; data" name="page-sidebar transforms correctly using &quot;with-import&quot; data" time="0.006">
    </testcase>
    <testcase classname="page-sidebar transforms correctly using &quot;aliased&quot; data" name="page-sidebar transforms correctly using &quot;aliased&quot; data" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="header-topbar" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.298" tests="1">
    <testcase classname="header-topbar transforms correctly using &quot;basic&quot; data" name="header-topbar transforms correctly using &quot;basic&quot; data" time="0.056">
    </testcase>
  </testsuite>
  <testsuite name="accordion-borders" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.36" tests="1">
    <testcase classname="accordion-borders transforms correctly using &quot;basic&quot; data" name="accordion-borders transforms correctly using &quot;basic&quot; data" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="button-variants" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.252" tests="1">
    <testcase classname="button-variants transforms correctly using &quot;basic&quot; data" name="button-variants transforms correctly using &quot;basic&quot; data" time="0.072">
    </testcase>
  </testsuite>
  <testsuite name="label-tag" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.237" tests="3">
    <testcase classname="label-tag transforms correctly using &quot;basic&quot; data" name="label-tag transforms correctly using &quot;basic&quot; data" time="0.046">
    </testcase>
    <testcase classname="label-tag transforms correctly using &quot;group&quot; data" name="label-tag transforms correctly using &quot;group&quot; data" time="0.009">
    </testcase>
    <testcase classname="label-tag transforms correctly using &quot;import-as&quot; data" name="label-tag transforms correctly using &quot;import-as&quot; data" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="replace-error" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.223" tests="3">
    <testcase classname="replace-error transforms correctly using &quot;basic&quot; data" name="replace-error transforms correctly using &quot;basic&quot; data" time="0.052">
    </testcase>
    <testcase classname="replace-error transforms correctly using &quot;import-as&quot; data" name="replace-error transforms correctly using &quot;import-as&quot; data" time="0.019">
    </testcase>
    <testcase classname="replace-error transforms correctly using &quot;as-variable&quot; data" name="replace-error transforms correctly using &quot;as-variable&quot; data" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="subheader-pagehead" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.261" tests="2">
    <testcase classname="subheader-pagehead transforms correctly using &quot;basic&quot; data" name="subheader-pagehead transforms correctly using &quot;basic&quot; data" time="0.074">
    </testcase>
    <testcase classname="subheader-pagehead transforms correctly using &quot;import-as&quot; data" name="subheader-pagehead transforms correctly using &quot;import-as&quot; data" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="non-compound-forms" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.293" tests="2">
    <testcase classname="non-compound-forms transforms correctly using &quot;basic&quot; data" name="non-compound-forms transforms correctly using &quot;basic&quot; data" time="0.144">
    </testcase>
    <testcase classname="non-compound-forms transforms correctly using &quot;aliased&quot; data" name="non-compound-forms transforms correctly using &quot;aliased&quot; data" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useEscapeKeydownHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:01" time="0.356" tests="1">
    <testcase classname="useEscapeKeydownHandler closes" name="useEscapeKeydownHandler closes" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useBlurHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.567" tests="2">
    <testcase classname="useBlurHandler resets search input value and closes" name="useBlurHandler resets search input value and closes" time="0.007">
    </testcase>
    <testcase classname="useBlurHandler resets search input value and keeps open" name="useBlurHandler resets search input value and keeps open" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useEnterOrSpaceKeydownHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:01" time="0.297" tests="3">
    <testcase classname="useEnterOrSpaceKeydownHandler opens if can open" name="useEnterOrSpaceKeydownHandler opens if can open" time="0.006">
    </testcase>
    <testcase classname="useEnterOrSpaceKeydownHandler does nothing if open and no option highlighted" name="useEnterOrSpaceKeydownHandler does nothing if open and no option highlighted" time="0.002">
    </testcase>
    <testcase classname="useEnterOrSpaceKeydownHandler closes if open and an option selected" name="useEnterOrSpaceKeydownHandler closes if open and an option selected" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useClickHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="0.84" tests="3">
    <testcase classname="useClickHandler opens and filters options" name="useClickHandler opens and filters options" time="0.008">
    </testcase>
    <testcase classname="useClickHandler closes when open" name="useClickHandler closes when open" time="0.001">
    </testcase>
    <testcase classname="useClickHandler does nothing when can&apos;t be open and not open" name="useClickHandler does nothing when can&apos;t be open and not open" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useArrowsKeydownHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:00" time="1.045" tests="3">
    <testcase classname="useArrowsKeydownHandler handles arrow down and up events" name="useArrowsKeydownHandler handles arrow down and up events" time="0.221">
    </testcase>
    <testcase classname="useArrowsKeydownHandler handles arrow down and up events when disabled" name="useArrowsKeydownHandler handles arrow down and up events when disabled" time="0.002">
    </testcase>
    <testcase classname="useArrowsKeydownHandler opens if not open" name="useArrowsKeydownHandler opens if not open" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useItemOnClickHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:01" time="0.209" tests="2">
    <testcase classname="useItemOnClickHandler closes and handles select" name="useItemOnClickHandler closes and handles select" time="0.018">
    </testcase>
    <testcase classname="useItemOnClickHandler does not close and handles multiple select" name="useItemOnClickHandler does not close and handles multiple select" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useItemOnMouseEnterHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:01" time="0.231" tests="2">
    <testcase classname="useItemOnMouseEnterHandler does nothing if entering a highlighted item" name="useItemOnMouseEnterHandler does nothing if entering a highlighted item" time="0.005">
    </testcase>
    <testcase classname="useItemOnMouseEnterHandler sets highlighted index" name="useItemOnMouseEnterHandler sets highlighted index" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useItemOnMouseDownHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:01" time="0.192" tests="1">
    <testcase classname="useItemOnMouseDownHandler prevents default" name="useItemOnMouseDownHandler prevents default" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="useResetClickHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:01" time="0.172" tests="1">
    <testcase classname="useResetClickHandler closes and handles select" name="useResetClickHandler closes and handles select" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useFocusHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:01" time="0.667" tests="2">
    <testcase classname="useFocusHandler resets search value when closed and focused" name="useFocusHandler resets search value when closed and focused" time="0.008">
    </testcase>
    <testcase classname="useFocusHandler does nothing when open" name="useFocusHandler does nothing when open" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="useSearchChangeHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:02" time="0.181" tests="1">
    <testcase classname="useSearchChangeHandler handles change" name="useSearchChangeHandler handles change" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="useSearchBlurHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:02" time="0.604" tests="2">
    <testcase classname="useSearchBlurHandler focuses select if focus changed to popper" name="useSearchBlurHandler focuses select if focus changed to popper" time="0.008">
    </testcase>
    <testcase classname="useSearchBlurHandler closes if focus changed to outside" name="useSearchBlurHandler closes if focus changed to outside" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useSelectHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:02" time="0.547" tests="4">
    <testcase classname="useSelectHandler single mode selects option" name="useSelectHandler single mode selects option" time="0.008">
    </testcase>
    <testcase classname="useSelectHandler single mode resets value" name="useSelectHandler single mode resets value" time="0.001">
    </testcase>
    <testcase classname="useSelectHandler multiple mode selects option" name="useSelectHandler multiple mode selects option" time="0.001">
    </testcase>
    <testcase classname="useSelectHandler multiple mode resets value" name="useSelectHandler multiple mode resets value" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useSearchKeydownHandler" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:02" time="0.509" tests="4">
    <testcase classname="useSearchKeydownHandler focuses select on tab" name="useSearchKeydownHandler focuses select on tab" time="0.008">
    </testcase>
    <testcase classname="useSearchKeydownHandler handles arrows" name="useSearchKeydownHandler handles arrows" time="0.001">
    </testcase>
    <testcase classname="useSearchKeydownHandler handles enter" name="useSearchKeydownHandler handles enter" time="0">
    </testcase>
    <testcase classname="useSearchKeydownHandler handles escape" name="useSearchKeydownHandler handles escape" time="0">
    </testcase>
  </testsuite>
  <testsuite name="useSelectKeydownHandle" errors="0" failures="0" skipped="0" timestamp="2023-06-30T15:44:02" time="0.535" tests="36">
    <testcase classname="useSelectKeydownHandle handles by default when native" name="useSelectKeydownHandle handles by default when native" time="0.006">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `A` key" name="useSelectKeydownHandle focuses input if pressing `A` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `a` key" name="useSelectKeydownHandle focuses input if pressing `a` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `0` key" name="useSelectKeydownHandle focuses input if pressing `0` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `@` key" name="useSelectKeydownHandle focuses input if pressing `@` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `#` key" name="useSelectKeydownHandle focuses input if pressing `#` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `useSelectKeydownHandle  key" name="useSelectKeydownHandle focuses input if pressing `useSelectKeydownHandle  key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `%` key" name="useSelectKeydownHandle focuses input if pressing `%` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `^` key" name="useSelectKeydownHandle focuses input if pressing `^` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `(` key" name="useSelectKeydownHandle focuses input if pressing `(` key" time="0.004">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `)` key" name="useSelectKeydownHandle focuses input if pressing `)` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `_` key" name="useSelectKeydownHandle focuses input if pressing `_` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `+` key" name="useSelectKeydownHandle focuses input if pressing `+` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `-` key" name="useSelectKeydownHandle focuses input if pressing `-` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `=` key" name="useSelectKeydownHandle focuses input if pressing `=` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `.` key" name="useSelectKeydownHandle focuses input if pressing `.` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `,` key" name="useSelectKeydownHandle focuses input if pressing `,` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `!` key" name="useSelectKeydownHandle focuses input if pressing `!` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `?` key" name="useSelectKeydownHandle focuses input if pressing `?` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `&amp;` key" name="useSelectKeydownHandle focuses input if pressing `&amp;` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `*` key" name="useSelectKeydownHandle focuses input if pressing `*` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `|` key" name="useSelectKeydownHandle focuses input if pressing `|` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input if pressing `Backspace` key" name="useSelectKeydownHandle focuses input if pressing `Backspace` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing `Ctrl` key" name="useSelectKeydownHandle does not focus input if pressing `Ctrl` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing `Meta` key" name="useSelectKeydownHandle does not focus input if pressing `Meta` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing `Shift` key" name="useSelectKeydownHandle does not focus input if pressing `Shift` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing `CapsLock` key" name="useSelectKeydownHandle does not focus input if pressing `CapsLock` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing `Delete` key" name="useSelectKeydownHandle does not focus input if pressing `Delete` key" time="0.005">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing `PageUp` key" name="useSelectKeydownHandle does not focus input if pressing `PageUp` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing `Home` key" name="useSelectKeydownHandle does not focus input if pressing `Home` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing `F11` key" name="useSelectKeydownHandle does not focus input if pressing `F11` key" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle does not focus input if pressing ` ` key" name="useSelectKeydownHandle does not focus input if pressing ` ` key" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle focuses input on tab when open and search is shown" name="useSelectKeydownHandle focuses input on tab when open and search is shown" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle handles arrows" name="useSelectKeydownHandle handles arrows" time="0.001">
    </testcase>
    <testcase classname="useSelectKeydownHandle handles enter" name="useSelectKeydownHandle handles enter" time="0">
    </testcase>
    <testcase classname="useSelectKeydownHandle handles escape" name="useSelectKeydownHandle handles escape" time="0.001">
    </testcase>
  </testsuite>
</testsuites>