{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "useJSXTextNode": false
  },
  "plugins": ["fp"],
  "extends": [
    "standard",
    "standard-jsx",
    "plugin:react/recommended",
    "plugin:promise/recommended",
    "plugin:@typescript-eslint/recommended",
    "prettier/@typescript-eslint"
  ],
  "settings": {
    "react": {
      "version": "detect"
    }
  },
  "rules": {
    "no-console": 0,
    "space-before-function-paren": 0,
    "camelcase": 0,
    "react/jsx-fragments": [1, "element"],
    "react/jsx-max-props-per-line": [
      2,
      {
        "when": "multiline"
      }
    ],
    "react/jsx-one-expression-per-line": 0,
    "react/jsx-no-literals": 0,
    "react/jsx-no-bind": 0,
    "react/prop-types": 0,
    "react/jsx-curly-spacing": 0,
    "react/jsx-equals-spacing": 0,
    "react/jsx-indent": 0,
    "react/jsx-indent-props": 0,
    "react/jsx-tag-spacing": 0,
    "react/jsx-closing-bracket-location": [2, "line-aligned"],
    "react/jsx-wrap-multilines": [
      2,
      {
        "declaration": "parens-new-line",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": "parens-new-line",
        "logical": "parens-new-line"
      }
    ],
    "standard/array-bracket-even-spacing": 0,
    "standard/computed-property-even-spacing": 0,
    "standard/object-curly-even-spacing": 0,
    "react/jsx-max-depth": 0,
    "react/jsx-filename-extension": [
      1,
      {
        "extensions": [".tsx", ".jsx"]
      }
    ],
    "react/no-set-state": 0,
    "react/jsx-child-element-spacing": 0,
    "react/forbid-component-props": 0,
    "react/jsx-sort-props": 0,
    "react/no-multi-comp": [
      2,
      {
        "ignoreStateless": true
      }
    ],
    "react/sort-default-prop-types": 0,
    "react/sort-comp": [
      2,
      {
        "order": [
          "static-methods",
          "instance-variables",
          "lifecycle",
          "getters",
          "setters",
          "/^on.+$/",
          "/^handle.+$/",
          "/^(get|set)(?!(InitialState$|DefaultProps$|ChildContext$)).+$/",
          "instance-methods",
          "everything-else",
          "rendering"
        ],
        "groups": {
          "lifecycle": [
            "displayName",
            "propTypes",
            "contextTypes",
            "childContextTypes",
            "mixins",
            "statics",
            "defaultProps",
            "constructor",
            "getDefaultProps",
            "getInitialState",
            "state",
            "getChildContext",
            "componentWillMount",
            "componentDidMount",
            "componentWillReceiveProps",
            "shouldComponentUpdate",
            "componentWillUpdate",
            "componentDidUpdate",
            "componentWillUnmount"
          ],
          "rendering": ["/^render.+$/", "render"]
        }
      }
    ],
    "react/forbid-prop-types": [
      2,
      {
        "checkContextTypes": true
      }
    ],
    "object-curly-spacing": [2, "always"],
    "newline-after-var": [2, "always"],
    "import/order": [
      2,
      {
        "groups": [
          ["builtin", "external"],
          "internal",
          ["parent", "sibling", "index"]
        ],
        "newlines-between": "always"
      }
    ],
    "no-unused-vars": 0,
    "no-shadow": 1,
    "@typescript-eslint/no-unused-vars": 2,
    "@typescript-eslint/explicit-function-return-type": 0,
    "@typescript-eslint/no-non-null-assertion": 1,
    "@typescript-eslint/explicit-member-accessibility": 0,
    "@typescript-eslint/no-var-requires": 0,
    "@typescript-eslint/no-use-before-define": [
      2,
      {
        "functions": false,
        "classes": false,
        "variables": false,
        "typedefs": false
      }
    ],
    "@typescript-eslint/no-explicit-any": 1,
    "@typescript-eslint/ban-ts-ignore": 1,

    /**
     * COMPLEXITY
     * Ensure small functions and no nested/callback hell.
     * If you need more, consider extracting some logic.
     * Also you have cool destructuring feature, use it.
     */
    "complexity": ["warn", { "max": 5 }],
    "max-params": ["warn", 3],
    "max-statements": ["warn", 20],
    "max-statements-per-line": ["warn", { "max": 1 }],
    "max-nested-callbacks": ["warn", { "max": 3 }],
    "max-depth": ["warn", { "max": 3 }],
    "max-lines": [
      "error",
      {
        "max": 300,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "max-lines-per-function": [
      "warn",
      {
        "max": 200,
        "skipBlankLines": true,
        "skipComments": true
      }
    ],
    "no-param-reassign": "warn",
    "no-invalid-this": "warn",
    "fp/no-mutating-methods": "warn"
  },
  "env": {
    "jest": true,
    "browser": true
  },
  "globals": {
    "localStorage": true,
    "fetch": true
  },
  "overrides": [
    {
      "files": ["*.example.jsx", "*.example.tsx"],
      "rules": {
        "react/no-multi-comp": 0,
        "react/require-optimization": 0,
        "import/no-named-default": 0,
        "no-console": 0
      }
    },
    {
      "files": ["src/components/**/*[!example].tsx"],
      "rules": {
        "no-restricted-imports": [2, "styled-components"]
      }
    }
  ]
}
