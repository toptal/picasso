@Library('globalLibrary@master') _

image = null

pipeline {
  agent { label 'docker' }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 45, unit: 'MINUTES')
    buildDiscarder(logRotator(numToKeepStr: '20'))
    skipDefaultCheckout()
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch or tag to build')
    string(name: 'IMAGE_NAME', description: 'Image name')
    string(name: 'VERSION', description: 'Tag for the created docker image')
  }

  environment {
    GCE_ACCOUNT_KEY = credentials('jenkins-storage-administrator')
  }

  stages {
    stage('Git checkout') {
      steps {
        info "== Checking out ${BRANCH} =="
        gitCheckout(
          branches: BRANCH,
          credentials: [username: 'toptal-build', description: 'toptal-build-ssh-key'],
          url: 'git@github.com:toptal/picasso.git',
          additionalBehaviours: [
            cleanBeforeCheckout: true
          ])
        success "== Checked out ${BRANCH} at ${gitCommit()}"
      }
    }//checkout

    stage('Build image') {
      steps {
        script {
          version = sh(returnStdout: true, script: 'git describe --tags --always').trim()

          sh 'gcloud auth activate-service-account --key-file=$GCE_ACCOUNT_KEY'

          if (!isDockerImagePresentRemotely("us-central1-docker.pkg.dev/toptal-hub/containers/${IMAGE_NAME}", VERSION)) {
            image = docker.build("us-central1-docker.pkg.dev/toptal-hub/containers/${IMAGE_NAME}:${VERSION}")
            success "== Built image for version ${VERSION} =="
          } else {
            success "== Found image for version ${VERSION} =="
          }
        }
      }
    }//build image

    stage('Push image') {
      steps {
        script {
          if (image) {
            docker.withRegistry('https://us-central1-docker.pkg.dev/toptal-hub/containers/') {
              image.push(VERSION)
            }
            success "== Pushed image with tag ${VERSION} =="
          }
        }
      }
    } //push image
  }
  post {
    always {
      script {
        sendBuildData(currentBuild)
      }
    }
  }
}
