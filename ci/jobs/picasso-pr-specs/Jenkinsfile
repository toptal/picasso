@Library('globalLibrary@master') _

ghHelper = new helpers.GithubNotifyHelper()
helper = new helpers.Helpers()
def FAILURE_REASON

pipeline {
  agent {
      docker {
          image 'gcr.io/compute-engine-1069/picasso'
      }
  }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 10, unit: 'MINUTES')
    skipDefaultCheckout()
  }

  environment {
    NPM_TOKEN = credentials('npm-token-for-toptal-private-registry')
    GITHUB_TOKEN = credentials('toptal-devbot-token-github-notify')
  }

  stages {
    // Perform this only for PRs
    stage('Git checkout PR') {
      steps {
        info "== Checking out Git revision ${env.ghprbActualCommit}"
        gitCheckout(
                branches: "${env.ghprbActualCommit}",
                credentials: [username: 'git', description: 'jenkins/picasso'],
                url: 'git@github.com:toptal/picasso.git',
                refspec: "+refs/heads/${env.ghprbTargetBranch}:refs/remotes/origin/${ghprbTargetBranch} +refs/pull/${env.ghprbPullId}/*:refs/remotes/origin/pr/${env.ghprbPullId}/*",
                additionalBehaviours: [
                        advancedCheckoutBehaviour: [timeout: 120],
                        advancedCloneBehaviour   : [depth: 0, noTags: true, reference: '', shallow: false, timeout: 340],
                        cleanBeforeCheckout      : false,
                        calculateChangelog       : [compareRemote: 'origin', compareTarget: "${env.ghprbTargetBranch}"],
                        mergeBeforeBuild         : [mergeRemote: 'origin', mergeTarget: "${env.ghprbTargetBranch}", mergeStrategy: 'DEFAULT', fastForwardMode: 'FF']
                ])

        info "Git commit: ${gitCommit()}"
        info "Git branch: ${gitBranch()}"
        success 'Checkout finished'
      }
    }//stage

    stage('Yarn install') {
      steps {
        sh 'yarn install'
      } //steps
    }//stage

    stage('Deploy documentation') {
      steps {
        info "== Deploying docs"
        script {
          buildWithParameters(
            jobName: "picasso-docs",
            propagate: false,
            wait: false,
            parameters: [
              BRANCH: env.ghprbSourceBranch,
              PR_ID: env.ghprbPullId
            ]
          )
        }
      }
    }

    stage('Run linter') {
      steps {
        script {
          FAILURE_REASON = 'lint'
          ghHelper.notifyPR('Lint', 'PENDING', 'running', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        }
        sh 'yarn lint'
      } //steps
    }//stage

    stage('Run jest') {
      steps {
        script {
          FAILURE_REASON = 'jest'
          ghHelper.notifyPR('Jest Tests', 'PENDING', 'running', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        }
        sh 'yarn test'
      } //steps
    }//stage

    stage('Run visual tests') {
      steps {
        info 'Run visual tests...'
        script {
          FAILURE_REASON = 'visual tests'
          ghHelper.notifyPR('Visual Tests', 'PENDING', 'running', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        }
        sh 'yarn build:storybook'
        sh "./node_modules/.bin/jest --config='./puppeteer/puppeteer.jest.config.js'"
      } //steps
    }//stage
  }//stages

  post {
    success {
      success 'Build succeeded!'

      script {
        ghHelper.notifyPR('Lint', 'SUCCESS', 'Success', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        ghHelper.notifyPR('Jest Tests', 'SUCCESS', 'Success', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        ghHelper.notifyPR('Visual Tests', 'SUCCESS', 'Success', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
      }
    }

    failure {
      script {
        if (FAILURE_REASON == 'lint') {
          ghHelper.notifyPR('Lint', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
          ghHelper.notifyPR('Jest Tests', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
          ghHelper.notifyPR('Visual Tests', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        } else if (FAILURE_REASON == 'jest') {
          ghHelper.notifyPR('Lint', 'SUCCESS', 'Success', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
          ghHelper.notifyPR('Jest Tests', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
          ghHelper.notifyPR('Visual Tests', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        } else if (FAILURE_REASON == 'visual tests') {
          ghHelper.notifyPR('Lint', 'SUCCESS', 'Success', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
          ghHelper.notifyPR('Jest Tests', 'SUCCESS', 'Success', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
          ghHelper.notifyPR('Visual Tests', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        } else {
          ghHelper.notifyPR('Lint', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
          ghHelper.notifyPR('Jest Tests', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
          ghHelper.notifyPR('Visual Tests', 'ERROR', 'Job failed', "${env.ghprbActualCommit}", "${env.BUILD_URL}", 'picasso')
        }
      }
    }
  }
}//pipeline
