@Library('globalLibrary@master') _

ghHelper = new helpers.GithubNotifyHelper()
helper = new helpers.Helpers()
buildImageResult = []
repoName = 'picasso'
buildImageJobName = "${repoName}-build-image"
def FAILURE_REASON
def TOTAL_TESTS = 0
def FAILED_TESTS = 0

pipeline {
  agent { label 'docker' }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 35, unit: 'MINUTES')
    skipDefaultCheckout()
  }

  environment {
    GITHUB_TOKEN = credentials('toptal-devbot-token-github-notify')
    DANGER_GITHUB_API_TOKEN = credentials('toptal-devbot-personal-token')
  }

  stages {
    // Perform this only for PRs
    stage('Git checkout PR') {
      steps {
        info "== Checking out Git revision ${ghprbActualCommit}"
        gitCheckout(
          branches: "${ghprbActualCommit}",
          credentials: [username: 'toptal-build', description: 'toptal-build-ssh-key'],
          url: 'git@github.com:toptal/picasso.git',
          refspec: "+refs/heads/${ghprbTargetBranch}:refs/remotes/origin/${ghprbTargetBranch} +refs/pull/${ghprbPullId}/*:refs/remotes/origin/pr/${ghprbPullId}/*",
          additionalBehaviours: [
                  advancedCheckoutBehaviour: [timeout: 120],
                  advancedCloneBehaviour   : [depth: 0, noTags: true, reference: '', shallow: false, timeout: 340],
                  cleanBeforeCheckout      : false,
                  calculateChangelog       : [compareRemote: 'origin', compareTarget: "${ghprbTargetBranch}"],
                  mergeBeforeBuild         : [mergeRemote: 'origin', mergeTarget: "${ghprbTargetBranch}", mergeStrategy: 'DEFAULT', fastForwardMode: 'FF']
          ]
        )

        info "Git commit: ${gitCommit()}"
        info "Git branch: ${gitBranch()}"
        success 'Checkout finished'
      }
    }//stage

    stage('Build image') {
      steps {
        script {
          buildImageResult[0] = buildWithParameters(
            jobName: buildImageJobName,
            propagate: false,
            wait: true,
            parameters: [
              BRANCH: ghprbSourceBranch,
              VERSION: ghprbActualCommit,
              IMAGE_NAME: repoName
            ]
          )
        }
      } //steps
    } //stage

    stage('Danger checks') {
      when {
        expression {
          ghprbMatchesComment(/danger|all/)
        }
      }
      steps {
        script {
          sh """
            docker run \
            --rm \
            -e JENKINS_URL=${JENKINS_URL} \
            -e ghprbPullId=${ghprbPullId} \
            -e ghprbGhRepository=${ghprbGhRepository} \
            -e BUILD_URL=${BUILD_URL} \
            -e DANGER_GITHUB_API_TOKEN=${DANGER_GITHUB_API_TOKEN} \
            gcr.io/toptal-hub/${repoName}:${ghprbActualCommit} \
            yarn davinci ci danger
          """
        }
      } //steps
    } //stage

    stage('Deploy documentation') {
      when {
        expression {
          ghprbMatchesComment(/deploy:documentation|all/)
        }
      }
      steps {
        info "== Deploying docs"
        script {
          buildWithParameters(
            jobName: "picasso-docs",
            propagate: false,
            wait: false,
            parameters: [
              BRANCH: env.ghprbSourceBranch,
              PR_ID: env.ghprbPullId
            ]
          )
        }
      }
    }

    stage('Run tests') {
      parallel {

        stage('Run linter') {
          when {
            expression {
              ghprbMatchesComment(/lint|all/)
            }
          }

          steps {
            script {
              ghHelper.notifyPR('Lint', 'PENDING', 'running', "${ghprbActualCommit}", "${BUILD_URL}", repoName)

              sh "docker run --rm gcr.io/toptal-hub/${repoName}:${ghprbActualCommit} yarn lint"
            }
          } //steps

          post {
            success {
              success "Lint successful"
              script {
                ghHelper.notifyPR('Lint', 'SUCCESS', 'Success', "${ghprbActualCommit}", "${BUILD_URL}", repoName)
              }
            }
            failure {
              err "Lint failed"
              script {
                ghHelper.notifyPR('Lint', 'ERROR', 'Job failed', "${ghprbActualCommit}", "${BUILD_URL}", repoName)
              }
            }
          } //post
        } //stage

        stage('Run jest') {
          when {
            expression {
              ghprbMatchesComment(/test|all/)
            }
          }

          steps {
            script {
              ghHelper.notifyPR('Jest Tests', 'PENDING', 'running', "${ghprbActualCommit}", "${BUILD_URL}", repoName)

              sh "docker run --rm gcr.io/toptal-hub/${repoName}:${ghprbActualCommit} yarn test-ci"
            }
          } //steps

          post {
            success {
              success "Jest Tests"
              script {
                ghHelper.notifyPR('Jest Tests', 'SUCCESS', 'Success', "${ghprbActualCommit}", "${BUILD_URL}", repoName)
              }
            }
            failure {
              err "Jest Tests"
              script {
                ghHelper.notifyPR('Jest Tests', 'ERROR', 'Job failed', "${ghprbActualCommit}", "${BUILD_URL}", repoName)
              }
            }
          } //post
        } //stage

        stage('Check build') {
          when {
            expression {
              ghprbMatchesComment(/build|all/)
            }
          }

          steps {
            script {
              ghHelper.notifyPR('Check build', 'PENDING', 'running', "${ghprbActualCommit}", "${BUILD_URL}", repoName)

              sh "docker run --rm gcr.io/toptal-hub/${repoName}:${ghprbActualCommit} yarn build:dist"
            }
          } //steps

          post {
            success {
              success "Check build"
              script {
                ghHelper.notifyPR('Check build', 'SUCCESS', 'Success', "${ghprbActualCommit}", "${BUILD_URL}", repoName)
              }
            }
            failure {
              err "Check build"
              script {
                ghHelper.notifyPR('Check build', 'ERROR', 'Job failed', "${ghprbActualCommit}", "${BUILD_URL}", repoName)
              }
            }
          } //post
        }//stage

      } //parallel
    } //stage

    stage('Run visual tests') {
      when {
        expression {
          ghprbMatchesComment(/test:visual|visual|all/)
        }
      }

      steps {
        info 'Run visual tests...'
        script {
          ghHelper.notifyPR('Visual Tests', 'PENDING', 'running', "${ghprbActualCommit}", "${BUILD_URL}", repoName)

          sh "docker run --rm -v ${PWD}/__diff_output__:/app/__diff_output__ gcr.io/toptal-hub/${repoName}:${ghprbActualCommit} yarn run test-ci:visual"
        }
      } //steps

      post {
        success {
          success "Visual Tests"
          script {
            ghHelper.notifyPR('Visual Tests', 'SUCCESS', 'Success', "${ghprbActualCommit}", "${BUILD_URL}/Visual_20Regression_20Tests/", repoName)
          }
        }
        failure {
          err "Visual Tests"
          script {
            ghHelper.notifyPR('Visual Tests', 'ERROR', 'Job failed', "${ghprbActualCommit}","${BUILD_URL}/Visual_20Regression_20Tests/", repoName)
          }
        }
      } //post
    }//stage
  }//stages

  post {
    always {
      script {
        archiveArtifacts(
          artifacts: "${PWD}/__diff_output__/latest/*",
          fingerprint: true,
          allowEmptyArchive: true
        )

        publishHtmlReports(reportName: "Visual Regression Tests", reportDir: "${PWD}/__diff_output__/latest", reportFiles: 'index.html')
      }
    }
  }
}//pipeline
