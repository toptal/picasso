@Library('globalLibrary@master') _

ghHelper = new helpers.GithubNotifyHelper()
helper = new helpers.Helpers()
repoName = 'picasso'

pipeline {
  agent { label 'docker' }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 45, unit: 'MINUTES')
    skipDefaultCheckout()
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch or tag to build')
    string(name: 'COMMIT_ID', defaultValue: '', description: 'Commit hash from which docs should be created')
    string(name: 'PR_ID', defaultValue: '', description: 'Pull request id')
  }

  environment {
    DANGER_GITHUB_API_TOKEN = credentials('toptal-devbot-personal-token')
  }

  stages {
    // Perform this only for PRs
    stage('Git checkout PR') {
      steps {
        info "== Checking out Git revision ${COMMIT_ID}"
        gitCheckout(
          branches: "${COMMIT_ID}",
          credentials: [username: 'toptal-build', description: 'toptal-build-ssh-key'],
          url: 'git@github.com:toptal/picasso.git',
          refspec: "+refs/heads/${BRANCH}:refs/remotes/origin/${BRANCH} +refs/pull/${PR_ID}/*:refs/remotes/origin/pr/${PR_ID}/*",
          additionalBehaviours: [
                  advancedCheckoutBehaviour: [timeout: 120],
                  advancedCloneBehaviour   : [depth: 0, noTags: true, reference: '', shallow: false, timeout: 340],
                  cleanBeforeCheckout      : false,
                  calculateChangelog       : [compareRemote: 'origin', compareTarget: "${BRANCH}"]
          ]
        )

        info "Git commit: ${COMMIT_ID}"
        info "Git branch: ${BRANCH}"
        success 'Checkout finished'
      }
    }//stage
  }//stages

  post {
    always {
      script {
        archiveArtifacts(
          artifacts: "__diff_output__/latest/**/*.*",
          fingerprint: true,
          allowEmptyArchive: true
        )

        publishHTML([
          allowMissing: true,
          alwaysLinkToLastBuild: true,
          keepAll: true,
          reportDir: '__diff_output__/latest',
          reportFiles: 'index.html',
          reportName: 'Visual Regression Tests',
          reportTitles: 'All files'
        ])

        sendBuildData(currentBuild)
      }
    }
  }
}//pipeline
