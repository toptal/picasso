@Library('globalLibrary@master') _

helper = new helpers.Helpers()
ghHelper = new helpers.GithubNotifyHelper()

downStreamBuilds = []
def VERSION

pipeline {
  agent {
    docker {
      image 'gcr.io/compute-engine-1069/picasso:latest'
      alwaysPull true
      args '-v /etc/passwd:/etc/passwd -v /home/jenkins/.ssh:/home/jenkins/.ssh --entrypoint='
    }
  }

  parameters {
    string(name: 'RELEASE_AND_PUBLISH', defaultValue: '1', description: 'Run build in dry-run mode which will not release new version')
  }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 25, unit: 'MINUTES')
    skipDefaultCheckout()
    disableConcurrentBuilds()
  }

  environment {
    GITHUB_TOKEN = credentials('toptal-devbot-personal-token')
    NPM_TOKEN = credentials('npm-token-for-toptal-private-registry-publish')
    GIT_BRANCH = 'master'
    GIT_AUTHOR_NAME = 'toptal-davinci-bot'
    GIT_COMMITTER_NAME = 'toptal-davinci-bot'
    GIT_AUTHOR_EMAIL = 'milos.mosovsky+davinci@toptal.com'
    GIT_COMMITTER_EMAIL = 'milos.mosovsky+davinci@toptal.com'
  }

  stages {
    stage('Git checkout PR') {
      steps {
        info "== Checking out master"
          gitCheckout(
            branches: "$GIT_BRANCH",
            credentials: [username: 'git', description: 'jenkins/picasso'],
            url: 'git@github.com:toptal/picasso.git',
            refspec: '+refs/heads/master:refs/remotes/origin/master',
            additionalBehaviours: [
              checkoutToSpecificLocalBranch: [ localBranch: "$GIT_BRANCH" ],
              cleanBeforeCheckout         : true,
              advancedCheckoutBehaviour: [timeout: 30],
              advancedCloneBehaviour   : [depth: 0, noTags: false, reference: '', shallow: false, timeout: 30]
            ]
          )

        info "Git commit: ${gitCommit()}"
        info "Git branch: ${gitBranch()}"
        success "Checkout finished"
      }
    }//stage

    stage('Build new Docker image') {
      when { equals expected: "1", actual: params.RELEASE_AND_PUBLISH }
      steps {
        info "== Building new docker image"
        script {
          downStreamBuilds[0] = buildWithParameters(
            jobName: 'picasso-build-image',
            propagate: false,
            wait: true,
            parameters: [
              BRANCH: 'master'
            ]
          )
        }
      }
    }

    stage('Run release') {
      steps {
          sshagent(credentials: ['picasso-ssh-deploy-key']) { //provbot (jenkins/provbot)
            sh """
              git config user.email "$GIT_COMMITTER_EMAIL"
              git config user.name "$GIT_COMMITTER_NAME"
              yarn
              echo "" > VERSION.txt
              yarn release ${params.RELEASE_AND_PUBLISH}
              cat VERSION.txt
            """
            success "Done."
          }//sshagent
        script {
            NEW_VERSION = sh(returnStdout: true, script: 'cat VERSION.txt').trim()
        }
      } //steps
    }//stage

    stage('Deploy documentation') {
      when { equals expected: "1", actual: params.RELEASE_AND_PUBLISH }

      steps {
        info "== Deploying docs"
        script {
          downStreamBuilds[1] = buildWithParameters(
            jobName: "picasso-docs",
            propagate: false,
            wait: true,
            parameters: [
              CI_NODE_INDEX: "0"
            ]
          )
        }
      }
    }

    stage('Build results') {
      steps {
        script {
          helper.printBuildsResults(downStreamBuilds)
          helper.setBuildStatus(downStreamBuilds)
        }
      }
    }
  }//stages
  post {
      success {
          script {

            if (NEW_VERSION != "") {
              // https://api.slack.com/docs/message-attachments
              data =
              '''[
                {
                  "title": ":frontend-experience: New version {VERSION} of picasso was released",
                  "fallback": "New version {VERSION} of picasso was released",
                  "color": "#36a64f",
                  "fields": [
                    {
                      "title": "Documentation",
                      "value": "<https://picasso.toptal.net|See live documentation>",
                      "short": "true"
                    },
                    {
                      "title": "Release",
                      "value": "<https://github.com/toptal/picasso/releases/tag/v{VERSION}|See release v{VERSION}>",
                      "short": "true"
                    }
                  ]
                }
              ]'''

              attachments = data.replace('{VERSION}', NEW_VERSION)
              slackSend color: 'good', channel: '-frontend-exp-core', attachments: attachments
             
            } else {
              if (params.RELEASE_AND_PUBLISH == "1") {
                data = '''[
                  {
			              "title": ":nothingtodohere: Have a nice day :wave:"
      	          }
                ]'''

                message = "Hey, everything is fine, I wanted to do a release but I didn't find any suitable commits which should trigger a new version."
                attachments = data.replace('{VERSION}', NEW_VERSION)
                slackSend color: 'good', channel: '-frontend-exp-team', attachments: attachments, message: message
              } else {
                data = '''[
                  {
                    "title": "Current master version is ready to be released",
                    "fallback": "Current master version is ready to be released",
                    "color": "#e2b201",
                    "fields": [
                      {
                        "title": "This was just a test run",
                        "short": "true"
                      },
                      {
                        "title": "Nothing was released",
                        "short": "true"
                      }
                    ]
                  }
                ]'''
                attachments = data.replace('{VERSION}', NEW_VERSION)
                slackSend color: 'good', channel: '-frontend-exp-team', attachments: attachments
              }

            }
          }
      }

      failure {
        script {
          data = '''[
          {
            "title": "<!here> Current master version is broken",
            "fallback": "<!here> Current master version is broken",
            "color": "#e20101",
            "fields": [
              {
                "title": "Release failed",
                "value": "<{BUILD_URL}/consoleFull|Show build results>"
              }
            ]
          }
        ]'''
        attachments = data.replace('{BUILD_URL}', "${env.BUILD_URL}")
        slackSend color: 'good', channel: '-frontend-exp-team', attachments: attachments
        }
      }
  }
}//pipeline
