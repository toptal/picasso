@Library('globalLibrary@master') _
pipeline {

  agent { label 'docker' }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch or tag to build')
    string(name: 'PR_ID', defaultValue: '1', description: 'Pull request id')
  }

  environment {
    GITHUB_TOKEN = credentials('toptal-devbot-personal-token')
  }

  stages {
    stage("Git checkout branch") {
      steps {
        info "== Checking out Picasso"
        gitCheckout(
                branches: params.BRANCH,
                credentials: [username: 'git', description: 'jenkins/picasso'],
                url: 'git@github.com:toptal/picasso.git',
                additionalBehaviours: [
                        cleanBeforeCheckout: true
                ])

        info "Git commit: ${gitCommit()}"
        info "Git branch: ${gitBranch()}"
        success "Checkout finished"
      }
    }//stage

    stage('Build docs') {
        steps {
            script {
                sh """
                      docker run --tty -e HOME=`pwd` --volume `pwd`:`pwd`:z --user `id -u`:`id -g` \\
                      --workdir `pwd` node:8-alpine sh -c 'rm -rf ./node_modules && yarn install && yarn build:storybook'
                   """
            }//script
        }//steps
    }//stage
    
    stage('Sync docs to docs server') {
      steps {
        script {
            targetBranch = params.BRANCH.replaceAll('/', '-')

            sh """
                 rsync -avz --delete -e ssh ./build/storybook/ docs@docs.staging.toptal.net:~/docs/picasso/${targetBranch} && \\
                 rm -rf ./build
               """

            if (targetBranch != 'master') {
                existingComments = sh(returnStdout: true, script: "curl -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/toptal/picasso/issues/${params.PR_ID}/comments | jq -r '.[] | select(.user.login | contains(\"toptal-devbot\")) | select(.body | contains(\"Demo\")) | .id'").split("\n")
                existingComments.each {
                  if (it != "") {
                    echo "Comment [$it] - Marked for delete"
                    sh "curl -X \"DELETE\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/toptal/picasso/issues/comments/${it}"
                  }
                }
                
                def url = "https://picasso.toptal.net/${targetBranch}/"
                def comment = ":tada: Last commit is successfully deployed :tada: \\n\\nDemo is available on:\\n\\n- [${url}](${url}?${gitCommit()}) \\n\\n Your **[davinci-bot](https://github.com/toptal-davinci-bot)** :rocket:"
                gitHubPostComment('picasso', params.PR_ID, comment, env.GITHUB_TOKEN)
            }
        }//script
        script {
            VERSION = sh(returnStdout: true, script: 'cat package.json | jq ".version" -r').trim()
        }
      }//steps
    }//stage

  }//stages
}//pipeline
