@Library('globalLibrary@master') _

repoName = 'picasso'
imageCommitId = ''

pipeline {

  agent { label 'docker' }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch or tag to build')
    string(name: 'PR_ID', defaultValue: '1', description: 'Pull request id')
    string(name: 'COMMIT_ID', defaultValue: '', description: 'Commit hash from which docs should be created')
  }

  environment {
    GITHUB_TOKEN = credentials('TOPTAL_DEVBOT_TOKEN')
  }

  stages {
    stage("Git checkout branch") {
      steps {
        info "== Checking out ${BRANCH} =="
        gitCheckout(
          branches: BRANCH,
          credentials: [id: 'SSH_KEY_TOPTAL_BUILD'],
          url: 'git@github.com:toptal/picasso.git',
          additionalBehaviours: [
            cleanBeforeCheckout: true
          ]
        )

        info "Git commit: ${gitCommit()}"
        info "Git branch: ${gitBranch()}"
        success "Checkout finished"
      }
    }//stage

    stage('Build docs') {
      steps {
        script {
          if (COMMIT_ID != '') {
            imageCommitId = COMMIT_ID
          } else {
            imageCommitId = gitCommit()
          }
          sh """
            mkdir ${WORKSPACE}/deploy-docs

            docker run --rm \
            -v ${WORKSPACE}/deploy-docs:/app/deploy-docs \
            -e DEPLOY_DOCS_PATH=/app/deploy-docs \
            -e DEPLOY_DOCS_ARCHIVE=deploy-docs \
            us-central1-docker.pkg.dev/toptal-hub/containers/${repoName}:${imageCommitId} \
            ./bin/release-docs

            tar -zxvf ${WORKSPACE}/deploy-docs/deploy-docs.tar.gz -C ${WORKSPACE}/deploy-docs/
            rm ${WORKSPACE}/deploy-docs/deploy-docs.tar.gz
          """
        }//script
      }//steps
    }//stage

    stage('Sync docs to docs server') {
      steps {
        script {
          // normalize branch name from feature/feat(icon)-blabla
          targetBranch = params.BRANCH
                          .replaceAll(/\/|\(/, '-')
                          .replaceAll(/\)/, '')

          sshagent(credentials: ['SSH_PROVBOT_STAGING']) { //provbot (jenkins/provbot)
            sh """
                rsync -avz --delete -e ssh '${WORKSPACE}/deploy-docs/' 'docs@docs.staging.toptal.net:~/docs/picasso/${targetBranch}'
                rm -rf ./build
                rm -rf '${WORKSPACE}/deploy-docs'
            """
          } //sshagent
        }//script
        script {
          VERSION = sh(returnStdout: true, script: 'cat package.json | jq ".version" -r').trim()
        }
      }//steps
    }//stage

  }//stages
  post {
    always {
      script {
        sendBuildData(currentBuild)
      }
    }
  }
}//pipeline
