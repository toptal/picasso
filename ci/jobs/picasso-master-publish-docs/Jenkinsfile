@Library('globalLibrary@master') _

repoName = 'picasso'

pipeline {

  agent { label 'docker' }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 1, unit: 'HOURS')
  }

  parameters {
    string(name: 'BRANCH', defaultValue: 'master', description: 'Branch or tag to build')
    string(name: 'PR_ID', defaultValue: '1', description: 'Pull request id')
  }

  environment {
    GITHUB_TOKEN = credentials('toptal-devbot-personal-token')
  }

  stages {
    stage("Git checkout branch") {
      steps {
        info "== Checking out ${BRANCH} =="
        gitCheckout(
          branches: BRANCH,
          credentials: [username: 'toptal-build', description: 'toptal-build-ssh-key'],
          url: 'git@github.com:toptal/picasso.git',
          additionalBehaviours: [
            cleanBeforeCheckout: true
          ]
        )

        info "Git commit: ${gitCommit()}"
        info "Git branch: ${gitBranch()}"
        success "Checkout finished"
      }
    }//stage

    stage('Build docs') {
      steps {
        script {
          sh """
            docker run \
            --rm \
            -v ${WORKSPACE}/deploy-docs:/app/deploy-docs \
            -e DEPLOY_DOCS_PATH=/app/deploy-docs \
            -e DEPLOY_DOCS_ARCHIVE=deploy-docs \
            gcr.io/toptal-hub/${repoName}:${gitCommit()} \
            ./bin/release-docs

            tar -zxvf ${WORKSPACE}/deploy-docs/deploy-docs.tar.gz -C ${WORKSPACE}/deploy-docs/
            rm ${WORKSPACE}/deploy-docs/deploy-docs.tar.gz
          """
        }//script
      }//steps
    }//stage

    stage('Sync docs to docs server') {
      steps {
        script {
          targetBranch = params.BRANCH.replaceAll('/', '-')

          sh """
                rsync -avz --delete -e ssh ${WORKSPACE}/deploy-docs/ docs@docs.staging.toptal.net:~/docs/picasso/${targetBranch} && \\
                rm -rf ./build
                rm -rf ${WORKSPACE}/deploy-docs
              """

          if (targetBranch != 'master') {
              existingComments = sh(returnStdout: true, script: "curl -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/toptal/picasso/issues/${params.PR_ID}/comments | jq -r '.[] | select(.user.login | contains(\"toptal-devbot\")) | select(.body | contains(\"Demo\")) | .id'").split("\n")
              existingComments.each {
                if (it != "") {
                  echo "Comment [$it] - Marked for delete"
                  sh "curl -X \"DELETE\" -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/toptal/picasso/issues/comments/${it}"
                }
              }

              def url = "https://picasso.toptal.net/${targetBranch}/"
              def comment = ":tada: Last commit is successfully deployed :tada: \\n\\nDemo is available on:\\n\\n- [${url}](${url}?${gitCommit()}) \\n\\n Your **[davinci-bot](https://github.com/toptal-davinci-bot)** :rocket:"
              gitHubPostComment('picasso', params.PR_ID, comment, env.GITHUB_TOKEN)
          }
        }//script
        script {
          VERSION = sh(returnStdout: true, script: 'cat package.json | jq ".version" -r').trim()
        }
      }//steps
    }//stage

  }//stages
}//pipeline
