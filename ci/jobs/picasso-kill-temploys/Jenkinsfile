@Library('globalLibrary@master') _
pipeline {

  agent { label 'docker' }

  options {
    ansiColor('xterm')
    timestamps()
    timeout(time: 5, unit: 'MINUTES')
  }

  triggers {
    cron('0 3 * * *')
  }

  environment {
    GITHUB_TOKEN = credentials('toptal-devbot-personal-token')
  }

  stages {
    stage('Kill outdated docs') {
        steps {
            script {
              sshagent(credentials: ['e707ac4d-9c1a-43d1-a139-e3fd8c9ef412']) { //provbot (jenkins/provbot)
                existingReleases = sh(returnStdout: true, script: 'ssh docs@docs.staging.toptal.net "find ~/docs/picasso/ -maxdepth 1 -mindepth 1 -type d | xargs basename -a"').split("\n")
                openReleases = sh(returnStdout: true, script: "curl -H \"Authorization: token $GITHUB_TOKEN\" https://api.github.com/repos/toptal/picasso/pulls | jq -r '.[] | .head.ref'")
                releasesToDelete = existingReleases.findAll { it != "master" && !openReleases.contains(it) }
                foldersToDelete = releasesToDelete.collect { "'${it}'" }

                foldersToDelete.each {
                  info "Folder [${it}] marked for removal"
                }

                if (!foldersToDelete.isEmpty()) {
                  foldersToDelete = foldersToDelete.join(' ')
                  sh """
                    ssh docs@docs.staging.toptal.net "cd ~/docs/picasso && rm -rf ${foldersToDelete}"
                  """
                } else {
                  success "Nothing to remove"
                }
              }//sshagent
            }//script
        }//steps
    }//stage
  }//stages
  post {
    always {
      script {
        sendBuildData(currentBuild)
      }
    }
  }
}//pipeline
