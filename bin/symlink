#!/usr/bin/env node

const path = require('path')
const { readdirSync, lstatSync } = require('fs')
const yargs = require('yargs').argv
const exec = require('child_process').execSync

const { log } = require('./utils')

const PACKAGES_DIR = path.join(__dirname, '../packages/')
const picassoRoot = __dirname

const link = function(name, cwd) {
  exec(`yarn link ${name}`, {
    cwd,
    stdio: 'inherit'
  })
}

const unlink = function(name, cwd) {
  try {
    exec(`yarn unlink ${name}`, {
      cwd,
      stdio: 'ignore',
      stderr: 'ignore'
    })
  } catch (e) {
    log(`Package ${name} not found. ${e}`)
  }
}

const createLink = function(name, cwd) {
  log(`Linking ${name}...`)
  exec('yarn link', {
    cwd,
    stdio: 'inherit'
  })
}

const removeLink = function(name, cwd) {
  try {
    log(`Unlinking ${name}...`)
    exec('yarn unlink', {
      cwd,
      stdio: 'ignore',
      stderr: 'ignore'
    })
  } catch (e) {
    log(`Package ${name} not found. ${e}`)
  }
}

const createReactLinks = function() {
  createLink('react', './node_modules/react')
  createLink('@types/react', './node_modules/@types/react')
}

const removeReactLinks = function() {
  removeLink('react', './node_modules/react')
  removeLink('@types/react', './node_modules/@types/react')
}

const getPicassoPackages = () => readdirSync(PACKAGES_DIR).filter(dir => lstatSync(path.join(PACKAGES_DIR, dir)).isDirectory())
const getPackageTsConfig = packageName => {
  const tsConfigPath = path.join(PACKAGES_DIR, packageName, './tsconfig.build.json')
  return require(tsConfigPath)
}
const getPackagePackageJson = packageName => {
  const packageJsonPath = path.join(PACKAGES_DIR, packageName, './package.json')
  return require(packageJsonPath)
}

const setup = function() {
  const packages = getPicassoPackages()

  const linkPackages = packages.map(package => {
    const tsConfig = getPackageTsConfig(package)
    const outputDir = path.join(
      PACKAGES_DIR,
      package,
      tsConfig.compilerOptions.outDir
    )

    const { name } = getPackagePackageJson(package)

    return { name, outputDir }
  })

  if (yargs.link) {
    if (!yargs.link.length || !yargs.link.trim()) {
      throw new Error('Please specify target project for linking, e.g.: `yarn symlink ~/projects/staff-portal`')
    }

    const destinationDir = yargs.link.trim()

    log('Creating Picasso links...')

    linkPackages.forEach(({ name, outputDir }) => removeLink(name, outputDir))
    removeReactLinks()

    linkPackages.forEach(({ name, outputDir }) => createLink(name, outputDir))
    createReactLinks()

    // because we are using yarn workspaces
    // we have default symlinks set up to /src folders of packages
    // so we need to override them and reffer to /build folders
    linkPackages.forEach(({ name }) => link(name, picassoRoot))

    log('Links are created. Linking the target project...')

    const packageNames = linkPackages.map(({ name }) => `"${name}"`);
    ['react', '@types/react', ...packageNames].forEach(name => link(name, destinationDir))

    log(`Successfully linked ${destinationDir} to local version of Picasso.`)
  }

  if (yargs.unlink) {
    if (!yargs.unlink.length || !yargs.unlink.trim()) {
      throw new Error('Please specify target project for unlinking, e.g.: `yarn symlink:off ~/projects/staff-portal`')
    }

    const destinationDir = yargs.unlink.trim()

    log('Unlinking Picasso packages...')
    linkPackages.forEach(({ name }) => unlink(name, picassoRoot))

    log('Removing links...')
    linkPackages.forEach(({ name, outputDir }) => removeLink(name, outputDir))
    removeReactLinks()

    log('Re-running "yarn install" to restore links for workspaces...')
    exec('yarn install --force')

    log('Unlinking the target project...')

    const packageNames = linkPackages.map(({ name }) => `"${name}"`);
    ['react', '@types/react', ...packageNames].forEach(name => unlink(name, destinationDir))

    log('Restoring packages on target project...')
    exec('yarn install --force', {
      cwd: destinationDir,
      stderr: 'inherit',
      stdio: 'inherit'
    })

    log(`Successfully unlinked ${destinationDir} from local version of Picasso.`)
  }
}

setup()
