#!/usr/bin/env node

const path = require('path')
const { readdirSync } = require('fs')
const yargs = require('yargs').argv
const exec = require('child_process').execSync

const { log } = require('./utils')

const PACKAGES_DIR = path.join(__dirname, '../packages/')

const link = function (name) {
  exec(`yarn link ${name}`, {
    stdio: 'inherit'
  })
}

const unlink = function (name) {
  try {
    exec(`yarn unlink ${name}`, {
      stdio: 'ignore',
      stderr: 'ignore'
    })
  } catch (e) {
    log(`Package ${name} not found. ${e}`)
  }
}

const createLink = function (name, cwd) {
  log(`Linking ${name}...`)
  exec('yarn link', {
    cwd,
    stdio: 'inherit'
  })
}

const removeLink = function (name, cwd) {
  try {
    log(`Unlinking ${name}...`)
    exec('yarn unlink', {
      cwd,
      stdio: 'ignore',
      stderr: 'ignore'
    })
  } catch (e) {
    log(`Package ${name} not found. ${e}`)
  }
}

const getPicassoPackages = () => readdirSync(PACKAGES_DIR).filter(item => item !== "base")
const getPackageTsConfig = packageName => {
  const tsConfigPath = path.join(
    PACKAGES_DIR,
    packageName,
    './tsconfig.json'
  )

  return require(tsConfigPath)
}
const getPackagePackageJson = packageName => {
  const packageJsonPath = path.join(PACKAGES_DIR, packageName, './package.json')

  return require(packageJsonPath)
}

const setup = function () {
  const packages = getPicassoPackages()

  const linkPackages = packages.map(package => {
    const tsConfig = getPackageTsConfig(package)
    const outputDir = path.join(
      PACKAGES_DIR,
      package,
      tsConfig.compilerOptions.outDir
    )

    const { name } = getPackagePackageJson(package)

    return { name, outputDir }
  })

  if (yargs.link) {
    log('Firt build dist versions of all the packages')

    exec('yarn build:package', { stdio: 'inherit' })

    log('Linking process started...')

    linkPackages.forEach(({ name, outputDir }) => removeLink(name, outputDir))
    removeLink('react', './node_modules/react')

    linkPackages.forEach(({ name, outputDir }) => createLink(name, outputDir))
    createLink('react', './node_modules/react')
    // because we are using yarn workspaces
    // we have default symlinks set up to /src folders of packages
    // so we need to override them and reffer to /build folders
    linkPackages.forEach(({ name }) => link(name))

    log('Linking process finished.')
  }

  if (yargs.unlink) {
    log('Unlinking process started...')

    linkPackages.forEach(({ name }) => unlink(name))
    linkPackages.forEach(({ name, outputDir }) => removeLink(name, outputDir))
    removeLink('react', './node_modules/react')

    log('Re-running "yarn install" to restore links for workspaces...')
    exec('yarn install --force')

    log('Unlinking process finished.')
  }
}

setup()
