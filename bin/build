#!/usr/bin/env node
/* eslint-disable no-console  */

const path = require('path')
const yargs = require('yargs').argv
const sh = require('shelljs')

const { log, copyPackageJson, safeExec } = require('./utils')
const tscPath = path.resolve(__dirname, '../node_modules/.bin/tsc')

const compile = function(tsConfig, packageJson, packageRootDir) {
  const args = []

  log(`Building ${packageJson.name}:${packageJson.version}`)

  function build() {
    const options = [
      {
        target: 'es5',
        module: 'Commonjs',
        outDir: path.resolve(packageRootDir, 'build')
      },
      {
        target: 'es2015',
        module: 'Esnext',
        outDir: path.resolve(packageRootDir, 'build', 'esm')
      }
    ]

    options.forEach(({ target, module, outDir }) => {
      const cmd = `${tscPath} -p tsconfig.json ${args.join(' ')} --target ${target} --module ${module} --outDir ${outDir}`

      safeExec(cmd)
      log(`${module} build ready in: ${tsConfig.compilerOptions.outDir}`, 'green')
    })
  }

  function clean() {
    log(`Removing: ${tsConfig.compilerOptions.outDir}`, 'green')
    sh.rm('-rf', tsConfig.compilerOptions.outDir)
  }

  clean()
  build()

  copyPackageJson(packageRootDir, entry)

  if (yargs.watch) {
    args.unshift('--watch')
    log(`Watching for changes in: ${tsConfig.include.join(', ')}`)
    build()
  }
}

const tsConfig = require(path.resolve(yargs.tsConfig))
const packageRootDir = path.resolve('.')
const packageJson = require(path.resolve(packageRootDir, './package.json'))
const entry = yargs.entry || './index.js'

compile(tsConfig, packageJson, packageRootDir)
