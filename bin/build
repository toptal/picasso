#!/usr/bin/env node
/* eslint-disable no-console  */

const path = require('path')
const yargs = require('yargs').argv
const sh = require('shelljs')
const exec = require('child_process').execSync

const { log, generatePackageJson } = require('./utils')
const config = require(`../tsconfig.json`)
const packageJson = require(path.resolve(__dirname, '../package.json'))
const tscPath = path.resolve(__dirname, '../node_modules/.bin/tsc')

const safeExec = cmd => {
  try {
    exec(
      cmd,
      { stdio: [process.stdin, process.stdout, process.stderr] },
      (error, stdout) => {
        if (error) {
          process.exit(1)
        } else {
          return stdout
        }
      }
    )
  } catch (e) {
    console.error(e.message)
    process.exit(1)
  }
}

const compile = function (config) {
  const args = []

  log(`Building ${packageJson.name}:${packageJson.version}`)

  function build () {
    const cmd = `${tscPath} -p tsconfig.json ${args.join(' ')}`

    safeExec(cmd)
    log(`Build ready in: ${config.compilerOptions.outDir}`, 'green')
  }

  function clean () {
    log(`Removing: ${config.compilerOptions.outDir}`, 'green')
    sh.rm('-rf', config.compilerOptions.outDir)
  }

  clean()
  build()

  generatePackageJson(packageJson, config.compilerOptions.outDir)

  if (yargs.watch) {
    args.unshift('--watch')
    log(`Watching for changes in: ${config.include.join(', ')}`)
    build()
  }
}

compile(config)
