#!/usr/bin/env node
/* eslint-disable */

const fs = require('fs-extra')
const path = require('path')
const chalk = require('chalk')
const yargs = require('yargs').argv
const sh = require('shelljs')
const exec = require('child_process').execSync

const config = require(`../tsconfig.json`)
const packageJson = require(path.resolve(__dirname, '../package.json'))
const tscPath = path.resolve(__dirname, '../node_modules/.bin/tsc')

const safeExec = (cmd) => {
  try {
    exec(cmd, 
      { stdio: [process.stdin, process.stdout, process.stderr] }, 
      (error, stdout, stderr) => {
      if (error) {
        process.exit(1)
      } else {
        return stdout
      }
    })
  } catch(e) {
    console.error(e.message)
    process.exit(1)
  }
}
// General logging
const log = function(text, color) {
  if (!color) color = 'blue'
  console.log(chalk[color](text))
}

const compile = function(config) {
  const args = []

  log(`Building ${packageJson.name}:${packageJson.version}`)

  function build() {
    const cmd = `${tscPath} -p tsconfig.json ${args.join(' ')}`

    safeExec(cmd)
    log(`Build ready in: ${config.compilerOptions.outDir}`, 'green')
  }

  function clean() {
    log(`Removing: ${config.compilerOptions.outDir}`, 'green')
    sh.rm('-rf', config.compilerOptions.outDir)
  }

  clean()
  build()

  if (String(yargs.config) === 'dev') {
    generatePackageJson(config.compilerOptions.outDir)
  }

  if (yargs.watch) {
    args.unshift('--watch')
    log(`Watching for changes in: ${config.include.join(', ')}`)
    build()
  }
}

// Generate artifical package.json for linking
function generatePackageJson(outDir) {
  log(`Creating package.json in: ${outDir}`)
  fs.ensureDirSync(outDir)
  const out = path.resolve(outDir, './package.json')

  const data = {
    ...packageJson,
    main: './index.js',
    module: './index.js'
  }

  fs.writeFileSync(out, JSON.stringify(data, null, 2))
}

compile(config)
