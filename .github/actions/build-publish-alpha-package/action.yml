name: Build and Publish Alpha Package
description: Builds project and pushes alpha release to NPM (copy paste from davinci-github-actions repo)

inputs:
  branch:
    required: true
    description: Name of the branch that will be published
    type: string
  root-folder:
    required: false
    description: Root folder of a package to be published
    type: string
  node-version:
    required: false
    default: 20
    description: Node.js version used. The action is guaranteed to work only with Node.js@20 (default value)

outputs:
  versions:
    description: 'List of new versions as output of `.version` file'
    value: ${{ steps.publish-package.outputs.versions }}

runs:
  using: composite
  steps:
    - name: Set up node
      uses: actions/setup-node@v4.0.0
      with:
        #node-version: ${{ inputs.node-version }}
        node-version: 24
        registry-url: 'https://registry.npmjs.org'

    #- name: Install npm@11.5.1
    #  shell: bash
    #  run: |
    #    npm install -g npm@11.5.1
    #    echo "$(npm root -g)/../bin" >> $GITHUB_PATH

    - name: Verify npm version
      shell: bash
      run: npm --version

    - name: Install dependencies
      shell: bash
      run: yarn install --frozen-lockfile

    - name: Apply davinci-engine overrides
      shell: bash
      run: ./scripts/override-davinci-files.sh

    - name: Build package (ONLY ONE)
      shell: bash
      env:
        NODE_OPTIONS: --max-old-space-size=8192
      run: npx nx run @toptal/base-tailwind:build:package

    - name: Publish packages
      id: publish-package
      shell: bash
      env:
        BRANCH: ${{ inputs.branch }}
        ROOT_FOLDER: ${{ inputs.root-folder }}
        NPM_CONFIG_PROVENANCE: true
        NODE_OPTIONS: --max-old-space-size=8192
      run: |
        # set .github folder as an unchanged, because lerna throws an error if there are uncommitted changes
        git checkout .github/

        npm -v

        npx davinci-engine publish-package \
          --alpha \
          --outputVersion .version \
          --branch "$BRANCH" ${ROOT_FOLDER:+"--publishRootFolder=$ROOT_FOLDER"}

        versions=$(cat .version)
        [ -z "$versions" ] && exit 1

        echo "versions=$versions" >> $GITHUB_OUTPUT
