name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - master

env:
  REPOSITORY_NAME: ${{ github.event.repository.name }}
jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          # This forces changesets to use git user, provided by GITHUB_TOKEN env var
          persist-credentials: false

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Check yarn cache
        uses: actions/cache@v4
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Dependencies (from network)
        if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' }}
        run: |
          yarn policies set-version
          yarn install --frozen-lockfile

      - name: Install Dependencies (from cache)
        if: ${{ steps.yarn-cache.outputs.cache-hit == 'true' }}
        run: |
          yarn policies set-version
          yarn install --frozen-lockfile --offline

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@e9cc34b540dd3ad1b030c57fd97269e8f6ad905a
        with:
          publish: yarn release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ steps.parse_secrets.outputs.NPM_TOKEN_PUBLISH }}

      - name: Edit "Version Package" PR
        if: ${{ steps.changesets.outputs.published != 'true' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Get list of all open PRs with
            // head branch "changeset-release/master"
            // (there should be max 1 PR with such condition)
            const { data } = await github.rest.pulls.list({
              owner: 'toptal',
              repo: 'picasso',
              state: 'open',
              head: 'toptal:changeset-release/master'
            })
            for await (let pr of data) {
              // add to all of them label "no-jira"
              github.rest.issues.addLabels({
                owner: 'toptal',
                repo: 'picasso',
                issue_number: pr.number,
                labels: [
                  'no-jira'
                ]
              })

              // append PR body with peerDependencies warning
              const hr = "\n_____"
              const warningTodo = "\n- [ ] ⚠️ "
              const message = "If major release, don't forget to check if peerDependencies needs to be also updated"
              const appendedMessage = hr + warningTodo + message
              const body = pr.body.includes(message) ? pr.body : pr.body + appendedMessage

              github.rest.pulls.update({
                owner: 'toptal',
                repo: 'picasso',
                pull_number: pr.number,
                body: body,
              })
            }

      - name: Send a Slack notification on failure
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v2.1.1
        env:
          # FAILURE_URL: ${{ steps.trigger-deploy.outputs.jenkins_job_url || steps.trigger-build.outputs.jenkins_job_url }}
          FALLBACK_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}?check_suite_focus=true
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          # slack-message: ':x: <!here> Current master version of Picasso is <${{ env.FAILURE_URL || env.FALLBACK_URL }}|broken>.'
          payload: |
            text: ':x: <!here> Current master version of Picasso is <${{ env.FALLBACK_URL }}|broken>.'

      - name: Send a Slack notification on success release
        if: ${{ success() && steps.changesets.outputs.published == 'true' }}
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            text: 'Current master version of Picasso successfully released :green_heart:'

      - name: Send a Slack notification on success PR merge
        if: ${{ success() && steps.changesets.outputs.published != 'true'}}
        uses: slackapi/slack-github-action@v2.1.1
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          payload: |
            text: 'A new PR was merged to Picasso :parrotspin:'

      # Implement Storybook deployment here

  integration-tests:
    name: Integration Tests
    uses: ./.github/workflows/davinci-integration-tests.yml
    secrets:
      HAPPO_API_KEY: ${{ secrets.HAPPO_API_KEY }}
      HAPPO_API_SECRET: ${{ secrets.HAPPO_API_SECRET }}
