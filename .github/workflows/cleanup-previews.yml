name: Cleanup PR Previews

on:
  # Immediate cleanup when PR closes
  pull_request:
    types: [closed]
    branches:
      - master
      - 'feature/**'

  # Scheduled garbage collection (runs weekly on Sundays at 2 AM UTC)
  schedule:
    - cron: '0 2 * * 0'

  # Manual trigger for emergency cleanup
  workflow_dispatch:
    inputs:
      cleanup_mode:
        description: 'Cleanup mode'
        required: true
        default: 'single'
        type: choice
        options:
          - single
          - all_closed
          - force_all

concurrency:
  group: gh-pages-deployment
  cancel-in-progress: false

jobs:
  cleanup-single-pr:
    if: ${{ github.event_name == 'pull_request' }}
    name: Cleanup Single PR Preview
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      pages: write
      id-token: write
    steps:
      - name: Checkout gh-pages branch
        id: checkout-gh-pages
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages-content
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove PR preview directory
        if: steps.checkout-gh-pages.outcome == 'success'
        run: |
          PR_DIR="gh-pages-content/prs/${{ github.event.pull_request.number }}"
          if [ -d "$PR_DIR" ]; then
            echo "🗑️ Removing preview directory: $PR_DIR"
            rm -rf "$PR_DIR"
            echo "✅ Cleanup successful"
          else
            echo "ℹ️ Preview directory $PR_DIR does not exist"
          fi

      - name: Deploy cleanup to GitHub Pages
        if: steps.checkout-gh-pages.outcome == 'success'
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-content

      - name: Deploy to GitHub Pages
        if: steps.checkout-gh-pages.outcome == 'success'
        uses: actions/deploy-pages@v4

      - name: Comment cleanup notification
        if: steps.checkout-gh-pages.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '🗑️ **Storybook preview cleaned up**\n\nThe preview deployment has been automatically removed since this PR was closed.'
            });

  garbage-collection:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    name: Garbage Collection
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Checkout gh-pages branch
        id: checkout-gh-pages
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages-content
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Garbage collect orphaned previews
        if: steps.checkout-gh-pages.outcome == 'success'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // Get all open PRs
            const { data: openPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            const openPRNumbers = new Set(openPRs.map(pr => pr.number.toString()));
            console.log(`📊 Found ${openPRNumbers.size} open PRs:`, Array.from(openPRNumbers).join(', '));

            // Check prs directory
            const prsDir = 'gh-pages-content/prs';
            if (!fs.existsSync(prsDir)) {
              console.log('ℹ️ No prs directory found');
              return;
            }

            const existingPreviews = fs.readdirSync(prsDir);
            console.log(`📁 Found ${existingPreviews.length} preview directories:`, existingPreviews.join(', '));

            let cleanedCount = 0;
            for (const prDir of existingPreviews) {
              const prNumber = prDir;
              
              // Skip if PR is still open (unless force mode)
              if (openPRNumbers.has(prNumber) && '${{ github.event.inputs.cleanup_mode }}' !== 'force_all') {
                console.log(`⏭️ Skipping ${prNumber} (PR still open)`);
                continue;
              }

              // Remove closed PR preview
              const fullPath = path.join(prsDir, prDir);
              try {
                fs.rmSync(fullPath, { recursive: true, force: true });
                console.log(`🗑️ Cleaned up preview: ${prNumber}`);
                cleanedCount++;
              } catch (error) {
                console.error(`❌ Failed to clean ${prNumber}:`, error.message);
              }
            }

            console.log(`✅ Garbage collection complete: ${cleanedCount} previews cleaned`);

            // Set output for summary
            core.setOutput('cleaned_count', cleanedCount);
            core.setOutput('total_found', existingPreviews.length);

      - name: Deploy cleanup to GitHub Pages
        if: steps.checkout-gh-pages.outcome == 'success'
        uses: actions/upload-pages-artifact@v3
        with:
          path: gh-pages-content

      - name: Deploy to GitHub Pages
        if: steps.checkout-gh-pages.outcome == 'success'
        uses: actions/deploy-pages@v4

      - name: Summary
        run: |
          echo "🧹 **Garbage Collection Summary**" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
